<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  
  

  


  <head>
    <title>
      GalleryConnector.vala on Ticket #1585 – Attachment
     – Yorba
    </title>
        <link rel="search" href="/search" />
        <link rel="help" href="/wiki/TracGuide" />
        <link rel="alternate" href="/raw-attachment/ticket/1585/GalleryConnector.vala" title="Original Format" />
        <link rel="up" href="/ticket/1585" title="Ticket #1585" />
        <link rel="start" href="/wiki" />
        <link rel="stylesheet" href="/chrome/common/css/trac.css" type="text/css" /><link rel="stylesheet" href="/pygments/trac.css" type="text/css" /><link rel="stylesheet" href="/chrome/common/css/code.css" type="text/css" /><link rel="stylesheet" href="/chrome/tracwysiwyg/wysiwyg.css" type="text/css" />
        <link rel="tracwysiwyg.stylesheet" href="/chrome/common/css/trac.css" /><link rel="tracwysiwyg.stylesheet" href="/chrome/tracwysiwyg/editor.css" />
        <link rel="tracwysiwyg.base" href="/" />
        <link rel="shortcut icon" href="/chrome/site/favicon.ico" type="image/x-icon" />
        <link rel="icon" href="/chrome/site/favicon.ico" type="image/x-icon" />
      <link type="application/opensearchdescription+xml" rel="search" href="/search/opensearch" title="Search Yorba" />
    <script type="text/javascript" src="/chrome/common/js/jquery.js"></script><script type="text/javascript" src="/chrome/common/js/babel.js"></script><script type="text/javascript" src="/chrome/common/js/messages/en_US.js"></script><script type="text/javascript" src="/chrome/common/js/trac.js"></script><script type="text/javascript" src="/chrome/common/js/search.js"></script><script type="text/javascript" src="/chrome/tracwysiwyg/wysiwyg.js"></script><script type="text/javascript" src="/chrome/tracwysiwyg/wysiwyg-load.js"></script>
    <!--[if lt IE 7]>
    <script type="text/javascript" src="/chrome/common/js/ie_pre7_hacks.js"></script>
    <![endif]-->
    <script type="text/javascript" src="/chrome/common/js/folding.js"></script><script type="text/javascript">
        jQuery(document).ready(function($) {
          $('#preview table.code').enableCollapsibleColumns($('#preview table.code thead th.content'));
        });
      </script>
    <link rel="stylesheet" type="text/css" href="/chrome/site/style.css" />
  </head>
  <body>
    <div id="banner">
      <div id="header">
        <a id="logo" href="/"><img src="/chrome/site/yorba_logo.png" alt="" height="70" /></a>
      </div>
      <form id="search" action="/search" method="get">
        <div>
          <label for="proj-search">Search:</label>
          <input type="text" id="proj-search" name="q" size="18" value="" />
          <input type="submit" value="Search" />
        </div>
      </form>
      <div id="metanav" class="nav">
    <ul>
      <li class="first"><a href="/login">Login</a></li><li><a href="/prefs">Preferences</a></li><li><a href="/wiki/TracGuide">Help/Guide</a></li><li><a href="/about">About Trac</a></li><li><a href="/register">Register</a></li><li class="last"><a href="/reset_password">Forgot your password?</a></li>
    </ul>
  </div>
    </div>
    <div id="mainnav" class="nav">
    <ul>
      <li class="first"><a href="/wiki">Wiki</a></li><li><a href="/timeline">Timeline</a></li><li><a href="/browser">Browse Source</a></li><li><a href="/report">View Tickets</a></li><li class="last"><a href="/search">Search</a></li>
    </ul>
  </div>
    <div id="main">
      <div id="ctxtnav" class="nav">
        <h2>Context Navigation</h2>
          <ul>
            <li class="first last"><a href="/ticket/1585">Back to Ticket #1585</a></li>
          </ul>
        <hr />
      </div>
    <div id="content" class="attachment">
        <h1><a href="/ticket/1585">Ticket #1585</a>: GalleryConnector.vala</h1>
        <table id="info" summary="Description">
          <tbody>
            <tr>
              <th scope="col">File GalleryConnector.vala,
                <span title="49829 bytes">48.7 KB</span>
                (added by Nimlar, <a class="timeline" href="/timeline?from=2010-12-07T14%3A31%3A27-08%3A00&amp;precision=second" title="2010-12-07T14:31:27-08:00 in Timeline">3 months</a> ago)</th>
            </tr>
            <tr>
              <td class="message searchable">
                <p>
New publish interface to Gallery2
</p>

              </td>
            </tr>
          </tbody>
        </table>
        <div id="preview" class="searchable">
          
  <table class="code"><thead><tr><th class="lineno" title="Line numbers">Line</th><th class="content"> </th></tr></thead><tbody><tr><th id="L1"><a href="#L1">1</a></th><td>/* Copyright 2009-2010 Nicolas Toromanoff nicolas@toromanoff.org</td></tr><tr><th id="L2"><a href="#L2">2</a></th><td> *</td></tr><tr><th id="L3"><a href="#L3">3</a></th><td> * This software is licensed under the GNU LGPL (version 2.1 or later).</td></tr><tr><th id="L4"><a href="#L4">4</a></th><td> * See the COPYING file in this distribution. </td></tr><tr><th id="L5"><a href="#L5">5</a></th><td> */</td></tr><tr><th id="L6"><a href="#L6">6</a></th><td></td></tr><tr><th id="L7"><a href="#L7">7</a></th><td>#if !NO_PUBLISHING</td></tr><tr><th id="L8"><a href="#L8">8</a></th><td></td></tr><tr><th id="L9"><a href="#L9">9</a></th><td>namespace GalleryConnector {</td></tr><tr><th id="L10"><a href="#L10">10</a></th><td>private const string SERVICE_NAME = "Gallery";</td></tr><tr><th id="L11"><a href="#L11">11</a></th><td>private const string SERVICE_WELCOME_MESSAGE = </td></tr><tr><th id="L12"><a href="#L12">12</a></th><td>    _("You are not currently logged into your Gallery.\n\nYou must have already signed up for a Gallery account to complete the login process. During login you will have to specifically authorize Shotwell Connect to link to your Gallery account.");</td></tr><tr><th id="L13"><a href="#L13">13</a></th><td>private const string DEFAULT_ALBUM_DIR = _("Shotwell");</td></tr><tr><th id="L14"><a href="#L14">14</a></th><td>private const string DEFAULT_ALBUM_TITLE = _("Shotwell default directory");</td></tr><tr><th id="L15"><a href="#L15">15</a></th><td>private const string CONFIG_NAME = "gallery";</td></tr><tr><th id="L16"><a href="#L16">16</a></th><td></td></tr><tr><th id="L17"><a href="#L17">17</a></th><td>private struct AlbumPerms {</td></tr><tr><th id="L18"><a href="#L18">18</a></th><td>    bool add;</td></tr><tr><th id="L19"><a href="#L19">19</a></th><td>    bool write;</td></tr><tr><th id="L20"><a href="#L20">20</a></th><td>    bool del_alb;</td></tr><tr><th id="L21"><a href="#L21">21</a></th><td>    bool create_sub;</td></tr><tr><th id="L22"><a href="#L22">22</a></th><td>}</td></tr><tr><th id="L23"><a href="#L23">23</a></th><td></td></tr><tr><th id="L24"><a href="#L24">24</a></th><td>private struct AlbumInfo {</td></tr><tr><th id="L25"><a href="#L25">25</a></th><td>    string extrafields;</td></tr><tr><th id="L26"><a href="#L26">26</a></th><td>}</td></tr><tr><th id="L27"><a href="#L27">27</a></th><td></td></tr><tr><th id="L28"><a href="#L28">28</a></th><td>private class Album {</td></tr><tr><th id="L29"><a href="#L29">29</a></th><td>    /* info from GalleryWeb */</td></tr><tr><th id="L30"><a href="#L30">30</a></th><td>    public string title;</td></tr><tr><th id="L31"><a href="#L31">31</a></th><td>    public string name;</td></tr><tr><th id="L32"><a href="#L32">32</a></th><td>    public string summary;</td></tr><tr><th id="L33"><a href="#L33">33</a></th><td>    public string  parentname;</td></tr><tr><th id="L34"><a href="#L34">34</a></th><td>    public AlbumPerms perms;</td></tr><tr><th id="L35"><a href="#L35">35</a></th><td>    public AlbumInfo  info ;</td></tr><tr><th id="L36"><a href="#L36">36</a></th><td>    </td></tr><tr><th id="L37"><a href="#L37">37</a></th><td>    </td></tr><tr><th id="L38"><a href="#L38">38</a></th><td>    public Album() {</td></tr><tr><th id="L39"><a href="#L39">39</a></th><td>    }</td></tr><tr><th id="L40"><a href="#L40">40</a></th><td>}</td></tr><tr><th id="L41"><a href="#L41">41</a></th><td>   </td></tr><tr><th id="L42"><a href="#L42">42</a></th><td>// not a struct because we want reference semantics</td></tr><tr><th id="L43"><a href="#L43">43</a></th><td>private class PublishingParameters {</td></tr><tr><th id="L44"><a href="#L44">44</a></th><td>    public string album_name;</td></tr><tr><th id="L45"><a href="#L45">45</a></th><td>    public string album_dir;</td></tr><tr><th id="L46"><a href="#L46">46</a></th><td>    public string album_title;</td></tr><tr><th id="L47"><a href="#L47">47</a></th><td>    public string parent_name;</td></tr><tr><th id="L48"><a href="#L48">48</a></th><td>    </td></tr><tr><th id="L49"><a href="#L49">49</a></th><td>    public PublishingParameters.to_new_album(string parent_name, string new_album_dir, string new_album_title) {</td></tr><tr><th id="L50"><a href="#L50">50</a></th><td>        this.album_name = null;</td></tr><tr><th id="L51"><a href="#L51">51</a></th><td>        this.parent_name= parent_name;</td></tr><tr><th id="L52"><a href="#L52">52</a></th><td>        this.album_dir = new_album_dir;</td></tr><tr><th id="L53"><a href="#L53">53</a></th><td>        this.album_title = new_album_title;</td></tr><tr><th id="L54"><a href="#L54">54</a></th><td>    }</td></tr><tr><th id="L55"><a href="#L55">55</a></th><td>    </td></tr><tr><th id="L56"><a href="#L56">56</a></th><td>    public PublishingParameters.to_existing_album(string dirname) {</td></tr><tr><th id="L57"><a href="#L57">57</a></th><td>      this.album_name = dirname ;</td></tr><tr><th id="L58"><a href="#L58">58</a></th><td>    }</td></tr><tr><th id="L59"><a href="#L59">59</a></th><td>    </td></tr><tr><th id="L60"><a href="#L60">60</a></th><td>    public bool is_to_new_album() {</td></tr><tr><th id="L61"><a href="#L61">61</a></th><td>        return (album_name == null);</td></tr><tr><th id="L62"><a href="#L62">62</a></th><td>    }</td></tr><tr><th id="L63"><a href="#L63">63</a></th><td>    </td></tr><tr><th id="L64"><a href="#L64">64</a></th><td>    // converts a publish-to-new-album parameters object into a publish-to-existing-album</td></tr><tr><th id="L65"><a href="#L65">65</a></th><td>    // parameters object</td></tr><tr><th id="L66"><a href="#L66">66</a></th><td>    public void convert(string album_name) {</td></tr><tr><th id="L67"><a href="#L67">67</a></th><td>        assert(is_to_new_album());</td></tr><tr><th id="L68"><a href="#L68">68</a></th><td>        this.album_name = album_name;</td></tr><tr><th id="L69"><a href="#L69">69</a></th><td>    }</td></tr><tr><th id="L70"><a href="#L70">70</a></th><td>}</td></tr><tr><th id="L71"><a href="#L71">71</a></th><td></td></tr><tr><th id="L72"><a href="#L72">72</a></th><td>public class Capabilities : ServiceCapabilities {</td></tr><tr><th id="L73"><a href="#L73">73</a></th><td>    public override string get_name() {</td></tr><tr><th id="L74"><a href="#L74">74</a></th><td>        return SERVICE_NAME;</td></tr><tr><th id="L75"><a href="#L75">75</a></th><td>    }</td></tr><tr><th id="L76"><a href="#L76">76</a></th><td></td></tr><tr><th id="L77"><a href="#L77">77</a></th><td>    public override ServiceCapabilities.MediaType get_supported_media() {</td></tr><tr><th id="L78"><a href="#L78">78</a></th><td>        return MediaType.PHOTO;</td></tr><tr><th id="L79"><a href="#L79">79</a></th><td>    }</td></tr><tr><th id="L80"><a href="#L80">80</a></th><td></td></tr><tr><th id="L81"><a href="#L81">81</a></th><td>    public override ServiceInteractor factory(PublishingDialog host) {</td></tr><tr><th id="L82"><a href="#L82">82</a></th><td>        return new Interactor(host);</td></tr><tr><th id="L83"><a href="#L83">83</a></th><td>    }</td></tr><tr><th id="L84"><a href="#L84">84</a></th><td>}</td></tr><tr><th id="L85"><a href="#L85">85</a></th><td></td></tr><tr><th id="L86"><a href="#L86">86</a></th><td>private Album[] extract_gallery_albums(string document_root) {</td></tr><tr><th id="L87"><a href="#L87">87</a></th><td>    Album[] result = new Album[0];</td></tr><tr><th id="L88"><a href="#L88">88</a></th><td>    Album currentAlbum = null;</td></tr><tr><th id="L89"><a href="#L89">89</a></th><td>    string[] lines;</td></tr><tr><th id="L90"><a href="#L90">90</a></th><td>    int nbAlbums = 0;</td></tr><tr><th id="L91"><a href="#L91">91</a></th><td>    int albumIdx = 1; /* as first album is the 1 */</td></tr><tr><th id="L92"><a href="#L92">92</a></th><td>    </td></tr><tr><th id="L93"><a href="#L93">93</a></th><td>    currentAlbum = new Album();</td></tr><tr><th id="L94"><a href="#L94">94</a></th><td>    lines=document_root.split("\n");</td></tr><tr><th id="L95"><a href="#L95">95</a></th><td>    foreach (string line in lines) {</td></tr><tr><th id="L96"><a href="#L96">96</a></th><td>        string[] line_splitted;</td></tr><tr><th id="L97"><a href="#L97">97</a></th><td>        string[] command_splitted;</td></tr><tr><th id="L98"><a href="#L98">98</a></th><td>      line_splitted = line.split("=");</td></tr><tr><th id="L99"><a href="#L99">99</a></th><td>      command_splitted = line_splitted[0].split(".");</td></tr><tr><th id="L100"><a href="#L100">100</a></th><td>      </td></tr><tr><th id="L101"><a href="#L101">101</a></th><td>      //maybe not the best way. We fill the temp variables title, name, summary, parentname, perms and info, and when the album index is incremetanted we save it.;</td></tr><tr><th id="L102"><a href="#L102">102</a></th><td>      switch (command_splitted[0]) {</td></tr><tr><th id="L103"><a href="#L103">103</a></th><td>        case "album" :</td></tr><tr><th id="L104"><a href="#L104">104</a></th><td>            if(command_splitted[command_splitted.length -1].to_int() != albumIdx) {</td></tr><tr><th id="L105"><a href="#L105">105</a></th><td>                /* New album description is just found */</td></tr><tr><th id="L106"><a href="#L106">106</a></th><td>                albumIdx++;</td></tr><tr><th id="L107"><a href="#L107">107</a></th><td>                /* add previous album to the result Array */</td></tr><tr><th id="L108"><a href="#L108">108</a></th><td>                result += currentAlbum ;</td></tr><tr><th id="L109"><a href="#L109">109</a></th><td>                /* create a new Album */</td></tr><tr><th id="L110"><a href="#L110">110</a></th><td>                currentAlbum = new Album();</td></tr><tr><th id="L111"><a href="#L111">111</a></th><td>            }</td></tr><tr><th id="L112"><a href="#L112">112</a></th><td>            switch (command_splitted[1]) {</td></tr><tr><th id="L113"><a href="#L113">113</a></th><td>                case "name" :</td></tr><tr><th id="L114"><a href="#L114">114</a></th><td>                    currentAlbum.name = line_splitted[1];</td></tr><tr><th id="L115"><a href="#L115">115</a></th><td>                    break;</td></tr><tr><th id="L116"><a href="#L116">116</a></th><td>                case "title" :</td></tr><tr><th id="L117"><a href="#L117">117</a></th><td>                    currentAlbum.title = line_splitted[1];</td></tr><tr><th id="L118"><a href="#L118">118</a></th><td>                    break;</td></tr><tr><th id="L119"><a href="#L119">119</a></th><td>                case "summary" :</td></tr><tr><th id="L120"><a href="#L120">120</a></th><td>                    currentAlbum.summary = line_splitted[1];</td></tr><tr><th id="L121"><a href="#L121">121</a></th><td>                    break;</td></tr><tr><th id="L122"><a href="#L122">122</a></th><td>                case "parent" :</td></tr><tr><th id="L123"><a href="#L123">123</a></th><td>                    currentAlbum.parentname = line_splitted[1];</td></tr><tr><th id="L124"><a href="#L124">124</a></th><td>                    break;</td></tr><tr><th id="L125"><a href="#L125">125</a></th><td>                case "perms" :</td></tr><tr><th id="L126"><a href="#L126">126</a></th><td>                    switch (command_splitted[2]) {</td></tr><tr><th id="L127"><a href="#L127">127</a></th><td>                        case "add":</td></tr><tr><th id="L128"><a href="#L128">128</a></th><td>                            currentAlbum.perms.add = line_splitted[1].to_bool();</td></tr><tr><th id="L129"><a href="#L129">129</a></th><td>                        break;</td></tr><tr><th id="L130"><a href="#L130">130</a></th><td>                        case "write":</td></tr><tr><th id="L131"><a href="#L131">131</a></th><td>                            currentAlbum.perms.write = line_splitted[1].to_bool();</td></tr><tr><th id="L132"><a href="#L132">132</a></th><td>                        break;</td></tr><tr><th id="L133"><a href="#L133">133</a></th><td>                        case "del_alb":</td></tr><tr><th id="L134"><a href="#L134">134</a></th><td>                            currentAlbum.perms.del_alb = line_splitted[1].to_bool();</td></tr><tr><th id="L135"><a href="#L135">135</a></th><td>                        break;</td></tr><tr><th id="L136"><a href="#L136">136</a></th><td>                        case "create_sub":</td></tr><tr><th id="L137"><a href="#L137">137</a></th><td>                            currentAlbum.perms.create_sub = line_splitted[1].to_bool();</td></tr><tr><th id="L138"><a href="#L138">138</a></th><td>                        break;</td></tr><tr><th id="L139"><a href="#L139">139</a></th><td>                    }                    </td></tr><tr><th id="L140"><a href="#L140">140</a></th><td>                    break;</td></tr><tr><th id="L141"><a href="#L141">141</a></th><td>                case "info" :</td></tr><tr><th id="L142"><a href="#L142">142</a></th><td>                    if (command_splitted[2] == "extrafields") {</td></tr><tr><th id="L143"><a href="#L143">143</a></th><td>                        currentAlbum.info.extrafields = line_splitted[1];</td></tr><tr><th id="L144"><a href="#L144">144</a></th><td>                    }</td></tr><tr><th id="L145"><a href="#L145">145</a></th><td>                    break;</td></tr><tr><th id="L146"><a href="#L146">146</a></th><td>                default :</td></tr><tr><th id="L147"><a href="#L147">147</a></th><td>                    // TODO: log </td></tr><tr><th id="L148"><a href="#L148">148</a></th><td>                    break;</td></tr><tr><th id="L149"><a href="#L149">149</a></th><td>            }</td></tr><tr><th id="L150"><a href="#L150">150</a></th><td>            break;</td></tr><tr><th id="L151"><a href="#L151">151</a></th><td>        case "album_count":</td></tr><tr><th id="L152"><a href="#L152">152</a></th><td>            nbAlbums = line_splitted[1].to_int();</td></tr><tr><th id="L153"><a href="#L153">153</a></th><td>            break;</td></tr><tr><th id="L154"><a href="#L154">154</a></th><td>        default :</td></tr><tr><th id="L155"><a href="#L155">155</a></th><td>            // TODO: log </td></tr><tr><th id="L156"><a href="#L156">156</a></th><td>            break; </td></tr><tr><th id="L157"><a href="#L157">157</a></th><td>        }</td></tr><tr><th id="L158"><a href="#L158">158</a></th><td>    }</td></tr><tr><th id="L159"><a href="#L159">159</a></th><td>    // save last album</td></tr><tr><th id="L160"><a href="#L160">160</a></th><td>    result += currentAlbum ;</td></tr><tr><th id="L161"><a href="#L161">161</a></th><td></td></tr><tr><th id="L162"><a href="#L162">162</a></th><td>    return result;</td></tr><tr><th id="L163"><a href="#L163">163</a></th><td>}</td></tr><tr><th id="L164"><a href="#L164">164</a></th><td></td></tr><tr><th id="L165"><a href="#L165">165</a></th><td>public class Interactor : ServiceInteractor {</td></tr><tr><th id="L166"><a href="#L166">166</a></th><td>    private Session session = null;</td></tr><tr><th id="L167"><a href="#L167">167</a></th><td>    private bool cancelled = false;</td></tr><tr><th id="L168"><a href="#L168">168</a></th><td>    private Album[] albums = null;</td></tr><tr><th id="L169"><a href="#L169">169</a></th><td>    private PublishingParameters parameters = null;</td></tr><tr><th id="L170"><a href="#L170">170</a></th><td>    private Uploader uploader = null;</td></tr><tr><th id="L171"><a href="#L171">171</a></th><td>    private ProgressPane progress_pane = null;</td></tr><tr><th id="L172"><a href="#L172">172</a></th><td>    </td></tr><tr><th id="L173"><a href="#L173">173</a></th><td>    public Interactor(PublishingDialog host) {</td></tr><tr><th id="L174"><a href="#L174">174</a></th><td>        base(host);</td></tr><tr><th id="L175"><a href="#L175">175</a></th><td>        session = new Session();</td></tr><tr><th id="L176"><a href="#L176">176</a></th><td>    }</td></tr><tr><th id="L177"><a href="#L177">177</a></th><td></td></tr><tr><th id="L178"><a href="#L178">178</a></th><td>    // EVENT: triggered when the user clicks "Login" in the credentials capture pane</td></tr><tr><th id="L179"><a href="#L179">179</a></th><td>    private void on_credentials_login(string url, string username, string password) {</td></tr><tr><th id="L180"><a href="#L180">180</a></th><td>        if (has_error() || cancelled)</td></tr><tr><th id="L181"><a href="#L181">181</a></th><td>            return;</td></tr><tr><th id="L182"><a href="#L182">182</a></th><td>        </td></tr><tr><th id="L183"><a href="#L183">183</a></th><td>        do_network_login(url, username, password);</td></tr><tr><th id="L184"><a href="#L184">184</a></th><td>    }</td></tr><tr><th id="L185"><a href="#L185">185</a></th><td></td></tr><tr><th id="L186"><a href="#L186">186</a></th><td>    // EVENT:  triggered when an error occurs in the login transaction</td></tr><tr><th id="L187"><a href="#L187">187</a></th><td>    private void on_login_network_error(RESTTransaction bad_txn, PublishingError err) {</td></tr><tr><th id="L188"><a href="#L188">188</a></th><td>        bad_txn.completed.disconnect(on_login_network_complete);</td></tr><tr><th id="L189"><a href="#L189">189</a></th><td>        bad_txn.network_error.disconnect(on_login_network_error);</td></tr><tr><th id="L190"><a href="#L190">190</a></th><td></td></tr><tr><th id="L191"><a href="#L191">191</a></th><td>        if (has_error() || cancelled)</td></tr><tr><th id="L192"><a href="#L192">192</a></th><td>            return;</td></tr><tr><th id="L193"><a href="#L193">193</a></th><td>        if (session.is_authenticated()) // ignore these events if the session is already auth'd</td></tr><tr><th id="L194"><a href="#L194">194</a></th><td>            return;</td></tr><tr><th id="L195"><a href="#L195">195</a></th><td></td></tr><tr><th id="L196"><a href="#L196">196</a></th><td>        do_show_configure_capture_pane(GalleryConfigurePane.Mode.FAILED_RETRY);</td></tr><tr><th id="L197"><a href="#L197">197</a></th><td>    }</td></tr><tr><th id="L198"><a href="#L198">198</a></th><td>    </td></tr><tr><th id="L199"><a href="#L199">199</a></th><td></td></tr><tr><th id="L200"><a href="#L200">200</a></th><td>    // Helper method: retrieve internal name for the newly created diretory</td></tr><tr><th id="L201"><a href="#L201">201</a></th><td>    private string extract_new_created_album_name(RESTTransaction txn) {</td></tr><tr><th id="L202"><a href="#L202">202</a></th><td>        string[] lines ;</td></tr><tr><th id="L203"><a href="#L203">203</a></th><td>        string document = txn.get_response() ;</td></tr><tr><th id="L204"><a href="#L204">204</a></th><td>        </td></tr><tr><th id="L205"><a href="#L205">205</a></th><td>        lines=document.split("\n");</td></tr><tr><th id="L206"><a href="#L206">206</a></th><td>        </td></tr><tr><th id="L207"><a href="#L207">207</a></th><td>        foreach (string line in lines) {</td></tr><tr><th id="L208"><a href="#L208">208</a></th><td>            string[] line_splitted;</td></tr><tr><th id="L209"><a href="#L209">209</a></th><td>            </td></tr><tr><th id="L210"><a href="#L210">210</a></th><td>            line_splitted = line.split("=");</td></tr><tr><th id="L211"><a href="#L211">211</a></th><td>            if(line_splitted[0] == "album_name") {</td></tr><tr><th id="L212"><a href="#L212">212</a></th><td>                return line_splitted[1];</td></tr><tr><th id="L213"><a href="#L213">213</a></th><td>            }</td></tr><tr><th id="L214"><a href="#L214">214</a></th><td>        }</td></tr><tr><th id="L215"><a href="#L215">215</a></th><td>        return "" ;</td></tr><tr><th id="L216"><a href="#L216">216</a></th><td>    } </td></tr><tr><th id="L217"><a href="#L217">217</a></th><td></td></tr><tr><th id="L218"><a href="#L218">218</a></th><td>    // EVENT: triggered when the network transaction that fetches the authentication token for</td></tr><tr><th id="L219"><a href="#L219">219</a></th><td>    //        the login account is completed successfully</td></tr><tr><th id="L220"><a href="#L220">220</a></th><td>    private void on_login_network_complete(RESTTransaction txn) {</td></tr><tr><th id="L221"><a href="#L221">221</a></th><td>        string auth_token;</td></tr><tr><th id="L222"><a href="#L222">222</a></th><td>        string cookie;</td></tr><tr><th id="L223"><a href="#L223">223</a></th><td>        </td></tr><tr><th id="L224"><a href="#L224">224</a></th><td>        txn.completed.disconnect(on_login_network_complete);</td></tr><tr><th id="L225"><a href="#L225">225</a></th><td>        txn.network_error.disconnect(on_login_network_error);</td></tr><tr><th id="L226"><a href="#L226">226</a></th><td></td></tr><tr><th id="L227"><a href="#L227">227</a></th><td>        int response = ((BaseGalleryTransaction)txn).check_gallery_response() ; </td></tr><tr><th id="L228"><a href="#L228">228</a></th><td>        if (response == 999) {</td></tr><tr><th id="L229"><a href="#L229">229</a></th><td>            do_show_configure_capture_pane(GalleryConfigurePane.Mode.NOT_GALLERY_URL);</td></tr><tr><th id="L230"><a href="#L230">230</a></th><td>            return ;</td></tr><tr><th id="L231"><a href="#L231">231</a></th><td>        } else if (response != 0) {</td></tr><tr><th id="L232"><a href="#L232">232</a></th><td>            do_show_configure_capture_pane(GalleryConfigurePane.Mode.FAILED_RETRY);</td></tr><tr><th id="L233"><a href="#L233">233</a></th><td>            return ;</td></tr><tr><th id="L234"><a href="#L234">234</a></th><td>        }</td></tr><tr><th id="L235"><a href="#L235">235</a></th><td>        </td></tr><tr><th id="L236"><a href="#L236">236</a></th><td>        if (has_error() || cancelled)</td></tr><tr><th id="L237"><a href="#L237">237</a></th><td>            return;</td></tr><tr><th id="L238"><a href="#L238">238</a></th><td></td></tr><tr><th id="L239"><a href="#L239">239</a></th><td>        LoginTransaction login_txn = (LoginTransaction) txn;</td></tr><tr><th id="L240"><a href="#L240">240</a></th><td>        </td></tr><tr><th id="L241"><a href="#L241">241</a></th><td>        auth_token = login_txn.find_auth_token();</td></tr><tr><th id="L242"><a href="#L242">242</a></th><td>        cookie = login_txn.get_cookie_from_transaction();</td></tr><tr><th id="L243"><a href="#L243">243</a></th><td>        session.authenticate(login_txn.get_gallery_url(), login_txn.get_username(), login_txn.get_password(), auth_token, cookie);</td></tr><tr><th id="L244"><a href="#L244">244</a></th><td>        do_fetch_account_information();</td></tr><tr><th id="L245"><a href="#L245">245</a></th><td>    }</td></tr><tr><th id="L246"><a href="#L246">246</a></th><td>    </td></tr><tr><th id="L247"><a href="#L247">247</a></th><td>    public override string get_name() {</td></tr><tr><th id="L248"><a href="#L248">248</a></th><td>        return SERVICE_NAME ;</td></tr><tr><th id="L249"><a href="#L249">249</a></th><td>    }</td></tr><tr><th id="L250"><a href="#L250">250</a></th><td>    </td></tr><tr><th id="L251"><a href="#L251">251</a></th><td>    public override void cancel_interaction() {</td></tr><tr><th id="L252"><a href="#L252">252</a></th><td>        session.stop_transactions();</td></tr><tr><th id="L253"><a href="#L253">253</a></th><td>    }</td></tr><tr><th id="L254"><a href="#L254">254</a></th><td></td></tr><tr><th id="L255"><a href="#L255">255</a></th><td>    public override void start_interaction() {</td></tr><tr><th id="L256"><a href="#L256">256</a></th><td>        get_host().set_standard_window_mode();</td></tr><tr><th id="L257"><a href="#L257">257</a></th><td></td></tr><tr><th id="L258"><a href="#L258">258</a></th><td>        if (!session.is_authenticated()) {</td></tr><tr><th id="L259"><a href="#L259">259</a></th><td>            do_show_service_welcome_pane();</td></tr><tr><th id="L260"><a href="#L260">260</a></th><td>        } else {</td></tr><tr><th id="L261"><a href="#L261">261</a></th><td>            //do_show_service_welcome_pane();</td></tr><tr><th id="L262"><a href="#L262">262</a></th><td>            do_network_login(session.get_gallery_url(), session.get_username(), session.get_password());</td></tr><tr><th id="L263"><a href="#L263">263</a></th><td>        }</td></tr><tr><th id="L264"><a href="#L264">264</a></th><td>    }</td></tr><tr><th id="L265"><a href="#L265">265</a></th><td>    </td></tr><tr><th id="L266"><a href="#L266">266</a></th><td>    // EVENT: triggered when the batch uploader reports that at least one of the network</td></tr><tr><th id="L267"><a href="#L267">267</a></th><td>    //        transactions encapsulating uploads has completed successfully</td></tr><tr><th id="L268"><a href="#L268">268</a></th><td>    private void on_upload_complete(BatchUploader uploader, int num_published) {</td></tr><tr><th id="L269"><a href="#L269">269</a></th><td>        uploader.upload_complete.disconnect(on_upload_complete);</td></tr><tr><th id="L270"><a href="#L270">270</a></th><td>        uploader.upload_error.disconnect(on_upload_error);</td></tr><tr><th id="L271"><a href="#L271">271</a></th><td>        uploader.status_updated.disconnect(progress_pane.set_status);</td></tr><tr><th id="L272"><a href="#L272">272</a></th><td>        </td></tr><tr><th id="L273"><a href="#L273">273</a></th><td>        // TODO: add a descriptive, translatable error message string here</td></tr><tr><th id="L274"><a href="#L274">274</a></th><td>        if (num_published == 0)</td></tr><tr><th id="L275"><a href="#L275">275</a></th><td>            post_error(new PublishingError.LOCAL_FILE_ERROR(""));</td></tr><tr><th id="L276"><a href="#L276">276</a></th><td></td></tr><tr><th id="L277"><a href="#L277">277</a></th><td>        if (has_error() || cancelled)</td></tr><tr><th id="L278"><a href="#L278">278</a></th><td>            return;</td></tr><tr><th id="L279"><a href="#L279">279</a></th><td></td></tr><tr><th id="L280"><a href="#L280">280</a></th><td>        do_show_success_pane();</td></tr><tr><th id="L281"><a href="#L281">281</a></th><td>    }</td></tr><tr><th id="L282"><a href="#L282">282</a></th><td></td></tr><tr><th id="L283"><a href="#L283">283</a></th><td>    // ACTION: display the success pane in the publishing dialog</td></tr><tr><th id="L284"><a href="#L284">284</a></th><td>    private void do_show_success_pane() {</td></tr><tr><th id="L285"><a href="#L285">285</a></th><td>        get_host().unlock_service();</td></tr><tr><th id="L286"><a href="#L286">286</a></th><td>        get_host().set_close_button_mode();</td></tr><tr><th id="L287"><a href="#L287">287</a></th><td></td></tr><tr><th id="L288"><a href="#L288">288</a></th><td>        get_host().install_pane(new SuccessPane(MediaType.PHOTO));</td></tr><tr><th id="L289"><a href="#L289">289</a></th><td>    }</td></tr><tr><th id="L290"><a href="#L290">290</a></th><td></td></tr><tr><th id="L291"><a href="#L291">291</a></th><td>    // EVENT: triggered when the batch uploader reports that at least one of the network</td></tr><tr><th id="L292"><a href="#L292">292</a></th><td>    //        transactions encapsulating uploads has caused a network error</td></tr><tr><th id="L293"><a href="#L293">293</a></th><td>    private void on_upload_error(BatchUploader uploader, PublishingError err) {</td></tr><tr><th id="L294"><a href="#L294">294</a></th><td>        uploader.upload_complete.disconnect(on_upload_complete);</td></tr><tr><th id="L295"><a href="#L295">295</a></th><td>        uploader.upload_error.disconnect(on_upload_error);</td></tr><tr><th id="L296"><a href="#L296">296</a></th><td>        uploader.status_updated.disconnect(progress_pane.set_status);</td></tr><tr><th id="L297"><a href="#L297">297</a></th><td></td></tr><tr><th id="L298"><a href="#L298">298</a></th><td>        if (has_error() || cancelled)</td></tr><tr><th id="L299"><a href="#L299">299</a></th><td>            return;</td></tr><tr><th id="L300"><a href="#L300">300</a></th><td></td></tr><tr><th id="L301"><a href="#L301">301</a></th><td>        post_error(err);</td></tr><tr><th id="L302"><a href="#L302">302</a></th><td>    }</td></tr><tr><th id="L303"><a href="#L303">303</a></th><td></td></tr><tr><th id="L304"><a href="#L304">304</a></th><td>    // ACTION: display the service welcome pane in the publishing dialog</td></tr><tr><th id="L305"><a href="#L305">305</a></th><td>    private void do_show_service_welcome_pane() {</td></tr><tr><th id="L306"><a href="#L306">306</a></th><td>        debug("Gallery.Interactor.do_show_login_welcome_pane( ): ACTION: installing login welcome pane");</td></tr><tr><th id="L307"><a href="#L307">307</a></th><td>        </td></tr><tr><th id="L308"><a href="#L308">308</a></th><td>        LoginWelcomePane service_welcome_pane = new LoginWelcomePane(SERVICE_WELCOME_MESSAGE);</td></tr><tr><th id="L309"><a href="#L309">309</a></th><td>        service_welcome_pane.login_requested.connect(on_service_welcome_login);</td></tr><tr><th id="L310"><a href="#L310">310</a></th><td></td></tr><tr><th id="L311"><a href="#L311">311</a></th><td>        get_host().unlock_service();</td></tr><tr><th id="L312"><a href="#L312">312</a></th><td>        get_host().set_cancel_button_mode();</td></tr><tr><th id="L313"><a href="#L313">313</a></th><td></td></tr><tr><th id="L314"><a href="#L314">314</a></th><td>        get_host().install_pane(service_welcome_pane);</td></tr><tr><th id="L315"><a href="#L315">315</a></th><td>    }</td></tr><tr><th id="L316"><a href="#L316">316</a></th><td></td></tr><tr><th id="L317"><a href="#L317">317</a></th><td>    // EVENT: triggered when the network transaction that fetches the user's account information</td></tr><tr><th id="L318"><a href="#L318">318</a></th><td>    //        is completed successfully</td></tr><tr><th id="L319"><a href="#L319">319</a></th><td>    private void on_initial_album_fetch_complete(RESTTransaction txn) {</td></tr><tr><th id="L320"><a href="#L320">320</a></th><td>        txn.completed.disconnect(on_initial_album_fetch_complete);</td></tr><tr><th id="L321"><a href="#L321">321</a></th><td>        txn.network_error.disconnect(on_initial_album_fetch_error);</td></tr><tr><th id="L322"><a href="#L322">322</a></th><td>        if (has_error() || cancelled)</td></tr><tr><th id="L323"><a href="#L323">323</a></th><td>            return;</td></tr><tr><th id="L324"><a href="#L324">324</a></th><td></td></tr><tr><th id="L325"><a href="#L325">325</a></th><td>        do_parse_and_display_account_information((AlbumDirectoryTransaction) txn);</td></tr><tr><th id="L326"><a href="#L326">326</a></th><td>    }</td></tr><tr><th id="L327"><a href="#L327">327</a></th><td>    </td></tr><tr><th id="L328"><a href="#L328">328</a></th><td>    // ACTION: run a REST transaction over the network to create a new album with the parameters</td></tr><tr><th id="L329"><a href="#L329">329</a></th><td>    //         specified in 'parameters'. Display a wait pane with an info message in the</td></tr><tr><th id="L330"><a href="#L330">330</a></th><td>    //         publishing dialog while the transaction is running. This action should only</td></tr><tr><th id="L331"><a href="#L331">331</a></th><td>    //         occur if 'parameters' describes a publish-to-new-album operation.</td></tr><tr><th id="L332"><a href="#L332">332</a></th><td>    private void do_create_album(PublishingParameters parameters) {</td></tr><tr><th id="L333"><a href="#L333">333</a></th><td>        assert(parameters.is_to_new_album());</td></tr><tr><th id="L334"><a href="#L334">334</a></th><td></td></tr><tr><th id="L335"><a href="#L335">335</a></th><td>        get_host().install_pane(new StaticMessagePane(_("Creating album...")));</td></tr><tr><th id="L336"><a href="#L336">336</a></th><td></td></tr><tr><th id="L337"><a href="#L337">337</a></th><td>        get_host().lock_service();</td></tr><tr><th id="L338"><a href="#L338">338</a></th><td>        get_host().set_cancel_button_mode();</td></tr><tr><th id="L339"><a href="#L339">339</a></th><td></td></tr><tr><th id="L340"><a href="#L340">340</a></th><td>        AlbumCreationTransaction creation_trans = new AlbumCreationTransaction(session, session.get_gallery_url(),</td></tr><tr><th id="L341"><a href="#L341">341</a></th><td>            parameters);</td></tr><tr><th id="L342"><a href="#L342">342</a></th><td>        creation_trans.network_error.connect(on_album_creation_error);</td></tr><tr><th id="L343"><a href="#L343">343</a></th><td>        creation_trans.completed.connect(on_album_creation_complete);</td></tr><tr><th id="L344"><a href="#L344">344</a></th><td>        try{</td></tr><tr><th id="L345"><a href="#L345">345</a></th><td>            creation_trans.execute();</td></tr><tr><th id="L346"><a href="#L346">346</a></th><td>        } catch (PublishingError err) {</td></tr><tr><th id="L347"><a href="#L347">347</a></th><td>            post_error(err);</td></tr><tr><th id="L348"><a href="#L348">348</a></th><td>        }</td></tr><tr><th id="L349"><a href="#L349">349</a></th><td>    }</td></tr><tr><th id="L350"><a href="#L350">350</a></th><td>    </td></tr><tr><th id="L351"><a href="#L351">351</a></th><td>    // ACTION: run a REST transaction over the network to upload the user's photos to the remote</td></tr><tr><th id="L352"><a href="#L352">352</a></th><td>    //         endpoint. Display a progress pane while the transaction is running.</td></tr><tr><th id="L353"><a href="#L353">353</a></th><td>    private void do_upload() {</td></tr><tr><th id="L354"><a href="#L354">354</a></th><td>        progress_pane = new ProgressPane();</td></tr><tr><th id="L355"><a href="#L355">355</a></th><td>        get_host().install_pane(progress_pane);</td></tr><tr><th id="L356"><a href="#L356">356</a></th><td></td></tr><tr><th id="L357"><a href="#L357">357</a></th><td>        get_host().lock_service();</td></tr><tr><th id="L358"><a href="#L358">358</a></th><td>        get_host().set_cancel_button_mode();</td></tr><tr><th id="L359"><a href="#L359">359</a></th><td></td></tr><tr><th id="L360"><a href="#L360">360</a></th><td>        Photo[] photos = get_host().get_photos();</td></tr><tr><th id="L361"><a href="#L361">361</a></th><td>        uploader = new Uploader(session, parameters, photos);</td></tr><tr><th id="L362"><a href="#L362">362</a></th><td></td></tr><tr><th id="L363"><a href="#L363">363</a></th><td>        uploader.upload_complete.connect(on_upload_complete);</td></tr><tr><th id="L364"><a href="#L364">364</a></th><td>        uploader.upload_error.connect(on_upload_error);</td></tr><tr><th id="L365"><a href="#L365">365</a></th><td>        uploader.status_updated.connect(progress_pane.set_status);</td></tr><tr><th id="L366"><a href="#L366">366</a></th><td></td></tr><tr><th id="L367"><a href="#L367">367</a></th><td>        uploader.upload();</td></tr><tr><th id="L368"><a href="#L368">368</a></th><td>    }</td></tr><tr><th id="L369"><a href="#L369">369</a></th><td>    </td></tr><tr><th id="L370"><a href="#L370">370</a></th><td>    // ACTION: the response body of 'transaction' is an txt document that describes the user's</td></tr><tr><th id="L371"><a href="#L371">371</a></th><td>    //         Albums (e.g. the names of the user's albums ). Parse the response body of </td></tr><tr><th id="L372"><a href="#L372">372</a></th><td>    //         'transaction' and display the publishing options pane with its widgets </td></tr><tr><th id="L373"><a href="#L373">373</a></th><td>    //          populated such that they reflect the user's account info</td></tr><tr><th id="L374"><a href="#L374">374</a></th><td>    private void do_parse_and_display_account_information(AlbumDirectoryTransaction transaction) {</td></tr><tr><th id="L375"><a href="#L375">375</a></th><td>        string response_doc;</td></tr><tr><th id="L376"><a href="#L376">376</a></th><td>        </td></tr><tr><th id="L377"><a href="#L377">377</a></th><td>        // TODO: add try catch</td></tr><tr><th id="L378"><a href="#L378">378</a></th><td>        response_doc = transaction.get_response();</td></tr><tr><th id="L379"><a href="#L379">379</a></th><td>        </td></tr><tr><th id="L380"><a href="#L380">380</a></th><td>        albums = extract_gallery_albums(response_doc);</td></tr><tr><th id="L381"><a href="#L381">381</a></th><td></td></tr><tr><th id="L382"><a href="#L382">382</a></th><td></td></tr><tr><th id="L383"><a href="#L383">383</a></th><td>        do_show_publishing_options_pane();</td></tr><tr><th id="L384"><a href="#L384">384</a></th><td>    }</td></tr><tr><th id="L385"><a href="#L385">385</a></th><td>    </td></tr><tr><th id="L386"><a href="#L386">386</a></th><td>    // EVENT: triggered when the user clicks "Logout" in the publishing options pane</td></tr><tr><th id="L387"><a href="#L387">387</a></th><td>    private void on_publishing_options_logout() {</td></tr><tr><th id="L388"><a href="#L388">388</a></th><td>        if (has_error() || cancelled)</td></tr><tr><th id="L389"><a href="#L389">389</a></th><td>            return;</td></tr><tr><th id="L390"><a href="#L390">390</a></th><td></td></tr><tr><th id="L391"><a href="#L391">391</a></th><td>        session.deauthenticate();</td></tr><tr><th id="L392"><a href="#L392">392</a></th><td></td></tr><tr><th id="L393"><a href="#L393">393</a></th><td>        do_show_service_welcome_pane();</td></tr><tr><th id="L394"><a href="#L394">394</a></th><td>    }</td></tr><tr><th id="L395"><a href="#L395">395</a></th><td>    </td></tr><tr><th id="L396"><a href="#L396">396</a></th><td>    // EVENT: triggered when the user clicks "Publish" in the publishing options pane</td></tr><tr><th id="L397"><a href="#L397">397</a></th><td>    private void on_publishing_options_publish(PublishingParameters parameters) {</td></tr><tr><th id="L398"><a href="#L398">398</a></th><td>        if (has_error() || cancelled)</td></tr><tr><th id="L399"><a href="#L399">399</a></th><td>            return;</td></tr><tr><th id="L400"><a href="#L400">400</a></th><td>        </td></tr><tr><th id="L401"><a href="#L401">401</a></th><td>        this.parameters = parameters;</td></tr><tr><th id="L402"><a href="#L402">402</a></th><td></td></tr><tr><th id="L403"><a href="#L403">403</a></th><td>        if (parameters.is_to_new_album()) { </td></tr><tr><th id="L404"><a href="#L404">404</a></th><td>            do_create_album(parameters);</td></tr><tr><th id="L405"><a href="#L405">405</a></th><td>        } else {</td></tr><tr><th id="L406"><a href="#L406">406</a></th><td>            do_upload();</td></tr><tr><th id="L407"><a href="#L407">407</a></th><td>        }</td></tr><tr><th id="L408"><a href="#L408">408</a></th><td>        </td></tr><tr><th id="L409"><a href="#L409">409</a></th><td>    }</td></tr><tr><th id="L410"><a href="#L410">410</a></th><td>    </td></tr><tr><th id="L411"><a href="#L411">411</a></th><td>    // ACTION: display the publishing options pane in the publishing dialog</td></tr><tr><th id="L412"><a href="#L412">412</a></th><td>    private void do_show_publishing_options_pane() {</td></tr><tr><th id="L413"><a href="#L413">413</a></th><td>        PublishingOptionsPane opts_pane = new PublishingOptionsPane(this, albums);</td></tr><tr><th id="L414"><a href="#L414">414</a></th><td>        opts_pane.publish.connect(on_publishing_options_publish);</td></tr><tr><th id="L415"><a href="#L415">415</a></th><td>        opts_pane.logout.connect(on_publishing_options_logout);</td></tr><tr><th id="L416"><a href="#L416">416</a></th><td>        get_host().install_pane(opts_pane);</td></tr><tr><th id="L417"><a href="#L417">417</a></th><td></td></tr><tr><th id="L418"><a href="#L418">418</a></th><td>        get_host().unlock_service();</td></tr><tr><th id="L419"><a href="#L419">419</a></th><td>        get_host().set_cancel_button_mode();</td></tr><tr><th id="L420"><a href="#L420">420</a></th><td>    }</td></tr><tr><th id="L421"><a href="#L421">421</a></th><td>    </td></tr><tr><th id="L422"><a href="#L422">422</a></th><td>    internal Session get_session() {</td></tr><tr><th id="L423"><a href="#L423">423</a></th><td>        return session;</td></tr><tr><th id="L424"><a href="#L424">424</a></th><td>    }</td></tr><tr><th id="L425"><a href="#L425">425</a></th><td>        </td></tr><tr><th id="L426"><a href="#L426">426</a></th><td>    // EVENT: triggered when the network transaction that fetches the user's account information</td></tr><tr><th id="L427"><a href="#L427">427</a></th><td>    //        fails</td></tr><tr><th id="L428"><a href="#L428">428</a></th><td>    private void on_initial_album_fetch_error(RESTTransaction bad_txn, PublishingError err) {</td></tr><tr><th id="L429"><a href="#L429">429</a></th><td>        bad_txn.completed.disconnect(on_initial_album_fetch_complete);</td></tr><tr><th id="L430"><a href="#L430">430</a></th><td>        bad_txn.network_error.disconnect(on_initial_album_fetch_error);</td></tr><tr><th id="L431"><a href="#L431">431</a></th><td></td></tr><tr><th id="L432"><a href="#L432">432</a></th><td>        if (has_error() || cancelled)</td></tr><tr><th id="L433"><a href="#L433">433</a></th><td>            return;</td></tr><tr><th id="L434"><a href="#L434">434</a></th><td></td></tr><tr><th id="L435"><a href="#L435">435</a></th><td>        if (bad_txn.get_status_code() == 403) {</td></tr><tr><th id="L436"><a href="#L436">436</a></th><td>            // if we get a 403 error (authentication failed) then we need to return to the login</td></tr><tr><th id="L437"><a href="#L437">437</a></th><td>            // screen because the user's auth token is no longer valid and he or she needs to</td></tr><tr><th id="L438"><a href="#L438">438</a></th><td>            // login again to obtain a new one</td></tr><tr><th id="L439"><a href="#L439">439</a></th><td>            session.deauthenticate();</td></tr><tr><th id="L440"><a href="#L440">440</a></th><td>            do_show_configure_capture_pane(GalleryConfigurePane.Mode.INTRO);</td></tr><tr><th id="L441"><a href="#L441">441</a></th><td>        } else {</td></tr><tr><th id="L442"><a href="#L442">442</a></th><td>            post_error(err);</td></tr><tr><th id="L443"><a href="#L443">443</a></th><td>        }</td></tr><tr><th id="L444"><a href="#L444">444</a></th><td>    }      </td></tr><tr><th id="L445"><a href="#L445">445</a></th><td>    </td></tr><tr><th id="L446"><a href="#L446">446</a></th><td>    // EVENT: triggered when the network transaction that creates a new album is completed</td></tr><tr><th id="L447"><a href="#L447">447</a></th><td>    //        successfully. This event should occur only when the user is publishing to a</td></tr><tr><th id="L448"><a href="#L448">448</a></th><td>    //        new album.</td></tr><tr><th id="L449"><a href="#L449">449</a></th><td>    private void on_album_creation_complete(RESTTransaction txn) {</td></tr><tr><th id="L450"><a href="#L450">450</a></th><td>        txn.completed.disconnect(on_album_creation_complete);</td></tr><tr><th id="L451"><a href="#L451">451</a></th><td>        txn.network_error.disconnect(on_album_creation_error);</td></tr><tr><th id="L452"><a href="#L452">452</a></th><td></td></tr><tr><th id="L453"><a href="#L453">453</a></th><td>        if (has_error() || cancelled)</td></tr><tr><th id="L454"><a href="#L454">454</a></th><td>            return;</td></tr><tr><th id="L455"><a href="#L455">455</a></th><td>        parameters.convert(extract_new_created_album_name(txn));</td></tr><tr><th id="L456"><a href="#L456">456</a></th><td>        do_upload();</td></tr><tr><th id="L457"><a href="#L457">457</a></th><td>    }</td></tr><tr><th id="L458"><a href="#L458">458</a></th><td></td></tr><tr><th id="L459"><a href="#L459">459</a></th><td>    // EVENT: triggered when the network transaction that creates a new album fails</td></tr><tr><th id="L460"><a href="#L460">460</a></th><td>    private void on_album_creation_error(RESTTransaction bad_txn, PublishingError err) {</td></tr><tr><th id="L461"><a href="#L461">461</a></th><td>        bad_txn.completed.disconnect(on_album_creation_complete);</td></tr><tr><th id="L462"><a href="#L462">462</a></th><td>        bad_txn.network_error.disconnect(on_album_creation_error);</td></tr><tr><th id="L463"><a href="#L463">463</a></th><td></td></tr><tr><th id="L464"><a href="#L464">464</a></th><td>        if (has_error() || cancelled)</td></tr><tr><th id="L465"><a href="#L465">465</a></th><td>            return;</td></tr><tr><th id="L466"><a href="#L466">466</a></th><td></td></tr><tr><th id="L467"><a href="#L467">467</a></th><td>        post_error(err);</td></tr><tr><th id="L468"><a href="#L468">468</a></th><td>    }</td></tr><tr><th id="L469"><a href="#L469">469</a></th><td>    </td></tr><tr><th id="L470"><a href="#L470">470</a></th><td>    // ACTION: run a REST transaction over the network to fetch the user's account information</td></tr><tr><th id="L471"><a href="#L471">471</a></th><td>    //         (e.g. the names of the user's albums and their corresponding REST URLs). While</td></tr><tr><th id="L472"><a href="#L472">472</a></th><td>    //         the network transaction is running, display a wait pane with an info message in</td></tr><tr><th id="L473"><a href="#L473">473</a></th><td>    //         the publishing dialog.</td></tr><tr><th id="L474"><a href="#L474">474</a></th><td>    private void do_fetch_account_information() {</td></tr><tr><th id="L475"><a href="#L475">475</a></th><td>        get_host().install_pane(new AccountFetchWaitPane());</td></tr><tr><th id="L476"><a href="#L476">476</a></th><td></td></tr><tr><th id="L477"><a href="#L477">477</a></th><td>        get_host().lock_service();</td></tr><tr><th id="L478"><a href="#L478">478</a></th><td>        get_host().set_cancel_button_mode();</td></tr><tr><th id="L479"><a href="#L479">479</a></th><td>        AlbumDirectoryTransaction directory_trans =</td></tr><tr><th id="L480"><a href="#L480">480</a></th><td>            new AlbumDirectoryTransaction(session, session.get_gallery_url() );</td></tr><tr><th id="L481"><a href="#L481">481</a></th><td>        directory_trans.network_error.connect(on_initial_album_fetch_error);</td></tr><tr><th id="L482"><a href="#L482">482</a></th><td>        directory_trans.completed.connect(on_initial_album_fetch_complete);</td></tr><tr><th id="L483"><a href="#L483">483</a></th><td>        try {</td></tr><tr><th id="L484"><a href="#L484">484</a></th><td>            directory_trans.execute();</td></tr><tr><th id="L485"><a href="#L485">485</a></th><td>        } catch (PublishingError err) {</td></tr><tr><th id="L486"><a href="#L486">486</a></th><td>            post_error(err);</td></tr><tr><th id="L487"><a href="#L487">487</a></th><td>        }</td></tr><tr><th id="L488"><a href="#L488">488</a></th><td>    }</td></tr><tr><th id="L489"><a href="#L489">489</a></th><td>    </td></tr><tr><th id="L490"><a href="#L490">490</a></th><td>    // EVENT: triggered when the user clicks "Login" in the service welcome pane</td></tr><tr><th id="L491"><a href="#L491">491</a></th><td>    private void on_service_welcome_login() {</td></tr><tr><th id="L492"><a href="#L492">492</a></th><td>        if (has_error() /*|| cancelled*/)</td></tr><tr><th id="L493"><a href="#L493">493</a></th><td>            return;</td></tr><tr><th id="L494"><a href="#L494">494</a></th><td></td></tr><tr><th id="L495"><a href="#L495">495</a></th><td>        do_show_configure_capture_pane(GalleryConfigurePane.Mode.INTRO);</td></tr><tr><th id="L496"><a href="#L496">496</a></th><td>    }</td></tr><tr><th id="L497"><a href="#L497">497</a></th><td>       </td></tr><tr><th id="L498"><a href="#L498">498</a></th><td>    // ACTION: given a username and password, run a REST transaction over the network to</td></tr><tr><th id="L499"><a href="#L499">499</a></th><td>    //         log a user into the Gallery Web Albums service</td></tr><tr><th id="L500"><a href="#L500">500</a></th><td>    private void do_network_login(string gallery_url, string username, string password) {</td></tr><tr><th id="L501"><a href="#L501">501</a></th><td>        get_host().install_pane(new LoginWaitPane());</td></tr><tr><th id="L502"><a href="#L502">502</a></th><td></td></tr><tr><th id="L503"><a href="#L503">503</a></th><td>        get_host().lock_service();</td></tr><tr><th id="L504"><a href="#L504">504</a></th><td>        get_host().set_cancel_button_mode();</td></tr><tr><th id="L505"><a href="#L505">505</a></th><td></td></tr><tr><th id="L506"><a href="#L506">506</a></th><td>        string my_url = gallery_url;</td></tr><tr><th id="L507"><a href="#L507">507</a></th><td></td></tr><tr><th id="L508"><a href="#L508">508</a></th><td>        if(!my_url.has_suffix(".php")) {</td></tr><tr><th id="L509"><a href="#L509">509</a></th><td>            if(!my_url.has_suffix("/")) {</td></tr><tr><th id="L510"><a href="#L510">510</a></th><td>                my_url = my_url + "/";</td></tr><tr><th id="L511"><a href="#L511">511</a></th><td>            }</td></tr><tr><th id="L512"><a href="#L512">512</a></th><td>            my_url = my_url + "main.php";</td></tr><tr><th id="L513"><a href="#L513">513</a></th><td>        }</td></tr><tr><th id="L514"><a href="#L514">514</a></th><td></td></tr><tr><th id="L515"><a href="#L515">515</a></th><td>        if(!my_url.has_prefix("http://") &amp;&amp; !my_url.has_prefix("https://")) {</td></tr><tr><th id="L516"><a href="#L516">516</a></th><td>            my_url = "http://" + my_url;</td></tr><tr><th id="L517"><a href="#L517">517</a></th><td>        }</td></tr><tr><th id="L518"><a href="#L518">518</a></th><td></td></tr><tr><th id="L519"><a href="#L519">519</a></th><td></td></tr><tr><th id="L520"><a href="#L520">520</a></th><td>        LoginTransaction login_trans = new LoginTransaction(session, my_url, username, password);</td></tr><tr><th id="L521"><a href="#L521">521</a></th><td>        login_trans.network_error.connect(on_login_network_error);</td></tr><tr><th id="L522"><a href="#L522">522</a></th><td>        login_trans.completed.connect(on_login_network_complete);</td></tr><tr><th id="L523"><a href="#L523">523</a></th><td>        try {</td></tr><tr><th id="L524"><a href="#L524">524</a></th><td>            login_trans.execute();</td></tr><tr><th id="L525"><a href="#L525">525</a></th><td>        } catch (PublishingError err) {</td></tr><tr><th id="L526"><a href="#L526">526</a></th><td>            post_error(err);</td></tr><tr><th id="L527"><a href="#L527">527</a></th><td>        }</td></tr><tr><th id="L528"><a href="#L528">528</a></th><td>    }</td></tr><tr><th id="L529"><a href="#L529">529</a></th><td></td></tr><tr><th id="L530"><a href="#L530">530</a></th><td>    // EVENT: triggered when the user clicks the "Go Back" button in the credentials capture pane</td></tr><tr><th id="L531"><a href="#L531">531</a></th><td>    private void on_credentials_go_back() {</td></tr><tr><th id="L532"><a href="#L532">532</a></th><td>        // ignore all events if the user has cancelled or we have and error situation</td></tr><tr><th id="L533"><a href="#L533">533</a></th><td>        if (has_error() || cancelled)</td></tr><tr><th id="L534"><a href="#L534">534</a></th><td>            return;</td></tr><tr><th id="L535"><a href="#L535">535</a></th><td></td></tr><tr><th id="L536"><a href="#L536">536</a></th><td>        do_show_service_welcome_pane();</td></tr><tr><th id="L537"><a href="#L537">537</a></th><td>    }</td></tr><tr><th id="L538"><a href="#L538">538</a></th><td>    </td></tr><tr><th id="L539"><a href="#L539">539</a></th><td>    // ACTION: display the credentials capture pane in the publishing dialog; the credentials</td></tr><tr><th id="L540"><a href="#L540">540</a></th><td>    //         capture pane can be displayed in different "modes" that display different</td></tr><tr><th id="L541"><a href="#L541">541</a></th><td>    //         messages to the user</td></tr><tr><th id="L542"><a href="#L542">542</a></th><td>    private void do_show_configure_capture_pane(GalleryConfigurePane.Mode mode) {</td></tr><tr><th id="L543"><a href="#L543">543</a></th><td>        GalleryConfigurePane creds_pane = new GalleryConfigurePane(this, mode);</td></tr><tr><th id="L544"><a href="#L544">544</a></th><td>        creds_pane.go_back.connect(on_credentials_go_back);</td></tr><tr><th id="L545"><a href="#L545">545</a></th><td>        creds_pane.login.connect(on_credentials_login);</td></tr><tr><th id="L546"><a href="#L546">546</a></th><td></td></tr><tr><th id="L547"><a href="#L547">547</a></th><td>        get_host().unlock_service();</td></tr><tr><th id="L548"><a href="#L548">548</a></th><td>        get_host().set_cancel_button_mode();</td></tr><tr><th id="L549"><a href="#L549">549</a></th><td></td></tr><tr><th id="L550"><a href="#L550">550</a></th><td>        get_host().install_pane(creds_pane);</td></tr><tr><th id="L551"><a href="#L551">551</a></th><td>    }</td></tr><tr><th id="L552"><a href="#L552">552</a></th><td>    </td></tr><tr><th id="L553"><a href="#L553">553</a></th><td>    internal new PublishingDialog get_host() {</td></tr><tr><th id="L554"><a href="#L554">554</a></th><td>        return base.get_host();</td></tr><tr><th id="L555"><a href="#L555">555</a></th><td>    }</td></tr><tr><th id="L556"><a href="#L556">556</a></th><td>}</td></tr><tr><th id="L557"><a href="#L557">557</a></th><td></td></tr><tr><th id="L558"><a href="#L558">558</a></th><td>private class BaseGalleryTransaction : RESTTransaction {</td></tr><tr><th id="L559"><a href="#L559">559</a></th><td>    public BaseGalleryTransaction(Session session, string endpoint_url) {</td></tr><tr><th id="L560"><a href="#L560">560</a></th><td>        base.with_endpoint_url(session, endpoint_url, HttpMethod.POST);</td></tr><tr><th id="L561"><a href="#L561">561</a></th><td>        </td></tr><tr><th id="L562"><a href="#L562">562</a></th><td>        add_argument("g2_controller", "remote:GalleryRemote");</td></tr><tr><th id="L563"><a href="#L563">563</a></th><td>    }</td></tr><tr><th id="L564"><a href="#L564">564</a></th><td>    </td></tr><tr><th id="L565"><a href="#L565">565</a></th><td>    public int check_gallery_response() {</td></tr><tr><th id="L566"><a href="#L566">566</a></th><td>        string[] lines ;</td></tr><tr><th id="L567"><a href="#L567">567</a></th><td>        string? document = this.get_response() ;</td></tr><tr><th id="L568"><a href="#L568">568</a></th><td>        if(document != null) {</td></tr><tr><th id="L569"><a href="#L569">569</a></th><td>          lines=document.split("\n");</td></tr><tr><th id="L570"><a href="#L570">570</a></th><td>          foreach (string line in lines) {</td></tr><tr><th id="L571"><a href="#L571">571</a></th><td>              string[] line_splitted;</td></tr><tr><th id="L572"><a href="#L572">572</a></th><td>              </td></tr><tr><th id="L573"><a href="#L573">573</a></th><td>              line_splitted = line.split("=");</td></tr><tr><th id="L574"><a href="#L574">574</a></th><td>              if(line_splitted[0] == "status") {</td></tr><tr><th id="L575"><a href="#L575">575</a></th><td>                  return line_splitted[1].to_int();</td></tr><tr><th id="L576"><a href="#L576">576</a></th><td>              }</td></tr><tr><th id="L577"><a href="#L577">577</a></th><td>          }</td></tr><tr><th id="L578"><a href="#L578">578</a></th><td>        }</td></tr><tr><th id="L579"><a href="#L579">579</a></th><td>        return 999 ;</td></tr><tr><th id="L580"><a href="#L580">580</a></th><td>    }</td></tr><tr><th id="L581"><a href="#L581">581</a></th><td>    </td></tr><tr><th id="L582"><a href="#L582">582</a></th><td>    // Helper methode get the auth token from an answer</td></tr><tr><th id="L583"><a href="#L583">583</a></th><td>    public string find_auth_token() {</td></tr><tr><th id="L584"><a href="#L584">584</a></th><td>        string[] lines ;</td></tr><tr><th id="L585"><a href="#L585">585</a></th><td>        string document = this.get_response() ;</td></tr><tr><th id="L586"><a href="#L586">586</a></th><td></td></tr><tr><th id="L587"><a href="#L587">587</a></th><td>        lines=document.split("\n");</td></tr><tr><th id="L588"><a href="#L588">588</a></th><td>        </td></tr><tr><th id="L589"><a href="#L589">589</a></th><td>        foreach (string line in lines) {</td></tr><tr><th id="L590"><a href="#L590">590</a></th><td>            string[] line_splitted;</td></tr><tr><th id="L591"><a href="#L591">591</a></th><td>            </td></tr><tr><th id="L592"><a href="#L592">592</a></th><td>            line_splitted = line.split("=");</td></tr><tr><th id="L593"><a href="#L593">593</a></th><td>            if(line_splitted[0] == "auth_token") {</td></tr><tr><th id="L594"><a href="#L594">594</a></th><td>                return line_splitted[1];</td></tr><tr><th id="L595"><a href="#L595">595</a></th><td>            }</td></tr><tr><th id="L596"><a href="#L596">596</a></th><td>        }</td></tr><tr><th id="L597"><a href="#L597">597</a></th><td>        return "" ;</td></tr><tr><th id="L598"><a href="#L598">598</a></th><td>    </td></tr><tr><th id="L599"><a href="#L599">599</a></th><td>    }</td></tr><tr><th id="L600"><a href="#L600">600</a></th><td></td></tr><tr><th id="L601"><a href="#L601">601</a></th><td>}</td></tr><tr><th id="L602"><a href="#L602">602</a></th><td></td></tr><tr><th id="L603"><a href="#L603">603</a></th><td>private class LoginTransaction : BaseGalleryTransaction {</td></tr><tr><th id="L604"><a href="#L604">604</a></th><td>    private string url;</td></tr><tr><th id="L605"><a href="#L605">605</a></th><td>    private string username;</td></tr><tr><th id="L606"><a href="#L606">606</a></th><td>    private string password;</td></tr><tr><th id="L607"><a href="#L607">607</a></th><td>    </td></tr><tr><th id="L608"><a href="#L608">608</a></th><td>    public LoginTransaction(Session session, string url, string username, string password) {</td></tr><tr><th id="L609"><a href="#L609">609</a></th><td>        base(session, url);</td></tr><tr><th id="L610"><a href="#L610">610</a></th><td>        this.url = url ;</td></tr><tr><th id="L611"><a href="#L611">611</a></th><td>        this.username = username ;</td></tr><tr><th id="L612"><a href="#L612">612</a></th><td>        this.password = password ; </td></tr><tr><th id="L613"><a href="#L613">613</a></th><td>        add_argument("g2_form[cmd]", "login");</td></tr><tr><th id="L614"><a href="#L614">614</a></th><td>        add_argument("g2_form[uname]", username);</td></tr><tr><th id="L615"><a href="#L615">615</a></th><td>        add_argument("g2_form[password]", password);</td></tr><tr><th id="L616"><a href="#L616">616</a></th><td>    }</td></tr><tr><th id="L617"><a href="#L617">617</a></th><td>    </td></tr><tr><th id="L618"><a href="#L618">618</a></th><td>    public string get_username() {</td></tr><tr><th id="L619"><a href="#L619">619</a></th><td>        return this.username;</td></tr><tr><th id="L620"><a href="#L620">620</a></th><td>    }</td></tr><tr><th id="L621"><a href="#L621">621</a></th><td>    </td></tr><tr><th id="L622"><a href="#L622">622</a></th><td>    public string get_password() {</td></tr><tr><th id="L623"><a href="#L623">623</a></th><td>        return this.password;</td></tr><tr><th id="L624"><a href="#L624">624</a></th><td>    }</td></tr><tr><th id="L625"><a href="#L625">625</a></th><td></td></tr><tr><th id="L626"><a href="#L626">626</a></th><td>    public string get_gallery_url() {</td></tr><tr><th id="L627"><a href="#L627">627</a></th><td>        return this.url;</td></tr><tr><th id="L628"><a href="#L628">628</a></th><td>    }</td></tr><tr><th id="L629"><a href="#L629">629</a></th><td>    </td></tr><tr><th id="L630"><a href="#L630">630</a></th><td>    // Helper method: retrieves Cookie rom RESTTransaction received</td></tr><tr><th id="L631"><a href="#L631">631</a></th><td>    // same as the one from PiwigoConnector.vala</td></tr><tr><th id="L632"><a href="#L632">632</a></th><td>    public string get_cookie_from_transaction() {</td></tr><tr><th id="L633"><a href="#L633">633</a></th><td>        string? cookie = this.get_message().response_headers.get("Set-Cookie");</td></tr><tr><th id="L634"><a href="#L634">634</a></th><td>        if ((cookie != null) &amp;&amp; (cookie != "")) {</td></tr><tr><th id="L635"><a href="#L635">635</a></th><td>            string tmp = cookie.rstr("GALLERYSID=");</td></tr><tr><th id="L636"><a href="#L636">636</a></th><td>            string[] values = tmp.split(";");</td></tr><tr><th id="L637"><a href="#L637">637</a></th><td>            string gallery_id = values[0];</td></tr><tr><th id="L638"><a href="#L638">638</a></th><td>            return gallery_id;</td></tr><tr><th id="L639"><a href="#L639">639</a></th><td>        } else {</td></tr><tr><th id="L640"><a href="#L640">640</a></th><td>            return "";</td></tr><tr><th id="L641"><a href="#L641">641</a></th><td>        }</td></tr><tr><th id="L642"><a href="#L642">642</a></th><td>    }    </td></tr><tr><th id="L643"><a href="#L643">643</a></th><td>}</td></tr><tr><th id="L644"><a href="#L644">644</a></th><td></td></tr><tr><th id="L645"><a href="#L645">645</a></th><td>private class AuthenticatedTransaction : BaseGalleryTransaction {</td></tr><tr><th id="L646"><a href="#L646">646</a></th><td>    public AuthenticatedTransaction(Session session, string endpoint_url) {</td></tr><tr><th id="L647"><a href="#L647">647</a></th><td>        base(session, endpoint_url);</td></tr><tr><th id="L648"><a href="#L648">648</a></th><td></td></tr><tr><th id="L649"><a href="#L649">649</a></th><td>        add_argument("g2_authToken", session.get_auth_token());</td></tr><tr><th id="L650"><a href="#L650">650</a></th><td>        add_header("Cookie", session.get_cookie());</td></tr><tr><th id="L651"><a href="#L651">651</a></th><td>    }</td></tr><tr><th id="L652"><a href="#L652">652</a></th><td>}</td></tr><tr><th id="L653"><a href="#L653">653</a></th><td></td></tr><tr><th id="L654"><a href="#L654">654</a></th><td>private class AlbumDirectoryTransaction : AuthenticatedTransaction {</td></tr><tr><th id="L655"><a href="#L655">655</a></th><td>    public AlbumDirectoryTransaction(Session session, string url) {</td></tr><tr><th id="L656"><a href="#L656">656</a></th><td>        base(session, url);</td></tr><tr><th id="L657"><a href="#L657">657</a></th><td>        add_argument("g2_form[cmd]", "fetch-albums-prune");</td></tr><tr><th id="L658"><a href="#L658">658</a></th><td>    }</td></tr><tr><th id="L659"><a href="#L659">659</a></th><td>}</td></tr><tr><th id="L660"><a href="#L660">660</a></th><td></td></tr><tr><th id="L661"><a href="#L661">661</a></th><td>private class PublishingOptionsPane : PublishingDialogPane {</td></tr><tr><th id="L662"><a href="#L662">662</a></th><td>    private struct SizeDescription {</td></tr><tr><th id="L663"><a href="#L663">663</a></th><td>        string name;</td></tr><tr><th id="L664"><a href="#L664">664</a></th><td>        int major_axis_pixels;</td></tr><tr><th id="L665"><a href="#L665">665</a></th><td></td></tr><tr><th id="L666"><a href="#L666">666</a></th><td>        SizeDescription(string name, int major_axis_pixels) {</td></tr><tr><th id="L667"><a href="#L667">667</a></th><td>            this.name = name;</td></tr><tr><th id="L668"><a href="#L668">668</a></th><td>            this.major_axis_pixels = major_axis_pixels;</td></tr><tr><th id="L669"><a href="#L669">669</a></th><td>        }</td></tr><tr><th id="L670"><a href="#L670">670</a></th><td>    }</td></tr><tr><th id="L671"><a href="#L671">671</a></th><td></td></tr><tr><th id="L672"><a href="#L672">672</a></th><td>    private const int PACKER_VERTICAL_PADDING = 16;</td></tr><tr><th id="L673"><a href="#L673">673</a></th><td>    private const int PACKER_HORIZ_PADDING = 128;</td></tr><tr><th id="L674"><a href="#L674">674</a></th><td>    private const int INTERSTITIAL_VERTICAL_SPACING = 20;</td></tr><tr><th id="L675"><a href="#L675">675</a></th><td>    private const int ACTION_BUTTON_SPACING = 48;</td></tr><tr><th id="L676"><a href="#L676">676</a></th><td></td></tr><tr><th id="L677"><a href="#L677">677</a></th><td>    private Gtk.ComboBox existing_albums_combo;</td></tr><tr><th id="L678"><a href="#L678">678</a></th><td>    private Gtk.Entry new_album_dir_entry ;</td></tr><tr><th id="L679"><a href="#L679">679</a></th><td>    private Gtk.Entry new_album_title_entry ;</td></tr><tr><th id="L680"><a href="#L680">680</a></th><td>    private Gtk.RadioButton use_existing_radio;</td></tr><tr><th id="L681"><a href="#L681">681</a></th><td>    private Gtk.RadioButton create_new_radio;</td></tr><tr><th id="L682"><a href="#L682">682</a></th><td>    private Interactor interactor;</td></tr><tr><th id="L683"><a href="#L683">683</a></th><td>    private Album[] albums;</td></tr><tr><th id="L684"><a href="#L684">684</a></th><td>    private SizeDescription[] size_descriptions;</td></tr><tr><th id="L685"><a href="#L685">685</a></th><td>    private Gtk.Button publish_button;</td></tr><tr><th id="L686"><a href="#L686">686</a></th><td></td></tr><tr><th id="L687"><a href="#L687">687</a></th><td>    public signal void publish(PublishingParameters parameters);</td></tr><tr><th id="L688"><a href="#L688">688</a></th><td>    public signal void logout();</td></tr><tr><th id="L689"><a href="#L689">689</a></th><td></td></tr><tr><th id="L690"><a href="#L690">690</a></th><td>    public PublishingOptionsPane(Interactor interactor, Album[] albums) {</td></tr><tr><th id="L691"><a href="#L691">691</a></th><td>        this.interactor = interactor;</td></tr><tr><th id="L692"><a href="#L692">692</a></th><td>        this.albums = albums;</td></tr><tr><th id="L693"><a href="#L693">693</a></th><td>        size_descriptions = create_size_descriptions();</td></tr><tr><th id="L694"><a href="#L694">694</a></th><td></td></tr><tr><th id="L695"><a href="#L695">695</a></th><td>        Gtk.SeparatorToolItem top_pusher = new Gtk.SeparatorToolItem();</td></tr><tr><th id="L696"><a href="#L696">696</a></th><td>        top_pusher.set_draw(false);</td></tr><tr><th id="L697"><a href="#L697">697</a></th><td>        top_pusher.set_size_request(-1, 8);</td></tr><tr><th id="L698"><a href="#L698">698</a></th><td>        add(top_pusher);</td></tr><tr><th id="L699"><a href="#L699">699</a></th><td></td></tr><tr><th id="L700"><a href="#L700">700</a></th><td>        Gtk.Label login_identity_label =</td></tr><tr><th id="L701"><a href="#L701">701</a></th><td>            new Gtk.Label(_("You are logged into Gallery Web Albums as %s.").printf(</td></tr><tr><th id="L702"><a href="#L702">702</a></th><td>            interactor.get_session().get_username()));</td></tr><tr><th id="L703"><a href="#L703">703</a></th><td></td></tr><tr><th id="L704"><a href="#L704">704</a></th><td>        add(login_identity_label);</td></tr><tr><th id="L705"><a href="#L705">705</a></th><td></td></tr><tr><th id="L706"><a href="#L706">706</a></th><td>        Gtk.VBox vert_packer = new Gtk.VBox(false, 0);</td></tr><tr><th id="L707"><a href="#L707">707</a></th><td>        Gtk.SeparatorToolItem packer_top_padding = new Gtk.SeparatorToolItem();</td></tr><tr><th id="L708"><a href="#L708">708</a></th><td>        packer_top_padding.set_draw(false);</td></tr><tr><th id="L709"><a href="#L709">709</a></th><td>        packer_top_padding.set_size_request(-1, PACKER_VERTICAL_PADDING);</td></tr><tr><th id="L710"><a href="#L710">710</a></th><td></td></tr><tr><th id="L711"><a href="#L711">711</a></th><td>        Gtk.SeparatorToolItem identity_table_spacer = new Gtk.SeparatorToolItem();</td></tr><tr><th id="L712"><a href="#L712">712</a></th><td>        identity_table_spacer.set_draw(false);</td></tr><tr><th id="L713"><a href="#L713">713</a></th><td>        identity_table_spacer.set_size_request(-1, INTERSTITIAL_VERTICAL_SPACING);</td></tr><tr><th id="L714"><a href="#L714">714</a></th><td>        vert_packer.add(identity_table_spacer);</td></tr><tr><th id="L715"><a href="#L715">715</a></th><td></td></tr><tr><th id="L716"><a href="#L716">716</a></th><td>        Gtk.Table main_table = new Gtk.Table(5, 4, false);</td></tr><tr><th id="L717"><a href="#L717">717</a></th><td></td></tr><tr><th id="L718"><a href="#L718">718</a></th><td>        Gtk.Label parent_dir_label = new Gtk.Label(_("In the directory:"));</td></tr><tr><th id="L719"><a href="#L719">719</a></th><td>        parent_dir_label.set_alignment(0.0f, 0.5f);</td></tr><tr><th id="L720"><a href="#L720">720</a></th><td>        main_table.attach(parent_dir_label, 0, 1, 0, 1,</td></tr><tr><th id="L721"><a href="#L721">721</a></th><td>            Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL,</td></tr><tr><th id="L722"><a href="#L722">722</a></th><td>            Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL, 4, 4);</td></tr><tr><th id="L723"><a href="#L723">723</a></th><td></td></tr><tr><th id="L724"><a href="#L724">724</a></th><td>        existing_albums_combo = new Gtk.ComboBox.text();</td></tr><tr><th id="L725"><a href="#L725">725</a></th><td>        existing_albums_combo.changed.connect(on_use_existing_albums_combo_update);</td></tr><tr><th id="L726"><a href="#L726">726</a></th><td>        Gtk.Alignment existing_albums_combo_frame = new Gtk.Alignment(0.0f, 0.5f, 0.0f, 0.0f);</td></tr><tr><th id="L727"><a href="#L727">727</a></th><td>        existing_albums_combo_frame.add(existing_albums_combo);</td></tr><tr><th id="L728"><a href="#L728">728</a></th><td>        main_table.attach(existing_albums_combo_frame, 1, 2, 0, 1,</td></tr><tr><th id="L729"><a href="#L729">729</a></th><td>            Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL,</td></tr><tr><th id="L730"><a href="#L730">730</a></th><td>            Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL, 4, 4);</td></tr><tr><th id="L731"><a href="#L731">731</a></th><td></td></tr><tr><th id="L732"><a href="#L732">732</a></th><td>        use_existing_radio = new Gtk.RadioButton.with_mnemonic(null, _("you will _upload your medias "));</td></tr><tr><th id="L733"><a href="#L733">733</a></th><td>        use_existing_radio.clicked.connect(on_use_existing_radio_clicked);</td></tr><tr><th id="L734"><a href="#L734">734</a></th><td>        main_table.attach(use_existing_radio, 1, 2, 1, 2,</td></tr><tr><th id="L735"><a href="#L735">735</a></th><td>            Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL,</td></tr><tr><th id="L736"><a href="#L736">736</a></th><td>            Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL, 4, 4);</td></tr><tr><th id="L737"><a href="#L737">737</a></th><td></td></tr><tr><th id="L738"><a href="#L738">738</a></th><td>        create_new_radio = new Gtk.RadioButton.with_mnemonic(use_existing_radio.get_group(),</td></tr><tr><th id="L739"><a href="#L739">739</a></th><td>            _("create a _new album to upload medias in:"));</td></tr><tr><th id="L740"><a href="#L740">740</a></th><td>        create_new_radio.clicked.connect(on_create_new_radio_clicked);</td></tr><tr><th id="L741"><a href="#L741">741</a></th><td>        main_table.attach(create_new_radio, 1, 2, 2, 3,</td></tr><tr><th id="L742"><a href="#L742">742</a></th><td>            Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL,</td></tr><tr><th id="L743"><a href="#L743">743</a></th><td>            Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL, 4, 4);</td></tr><tr><th id="L744"><a href="#L744">744</a></th><td></td></tr><tr><th id="L745"><a href="#L745">745</a></th><td>        Gtk.Label new_dir_label = new Gtk.Label.with_mnemonic(_("_dir name:"));</td></tr><tr><th id="L746"><a href="#L746">746</a></th><td>        new_dir_label.set_alignment(0.0f, 0.5f);</td></tr><tr><th id="L747"><a href="#L747">747</a></th><td>        main_table.attach(new_dir_label, 1, 2, 3, 4,</td></tr><tr><th id="L748"><a href="#L748">748</a></th><td>            Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL,</td></tr><tr><th id="L749"><a href="#L749">749</a></th><td>            Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL, 4, 4);</td></tr><tr><th id="L750"><a href="#L750">750</a></th><td>            </td></tr><tr><th id="L751"><a href="#L751">751</a></th><td>        new_album_dir_entry = new Gtk.Entry();</td></tr><tr><th id="L752"><a href="#L752">752</a></th><td>        new_album_dir_entry.changed.connect(on_new_album_entry_changed);</td></tr><tr><th id="L753"><a href="#L753">753</a></th><td>        main_table.attach(new_album_dir_entry, 2, 3, 3, 4,</td></tr><tr><th id="L754"><a href="#L754">754</a></th><td>            Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL,</td></tr><tr><th id="L755"><a href="#L755">755</a></th><td>            Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL, 4, 4);</td></tr><tr><th id="L756"><a href="#L756">756</a></th><td>            </td></tr><tr><th id="L757"><a href="#L757">757</a></th><td>        new_dir_label.set_mnemonic_widget(new_album_dir_entry);</td></tr><tr><th id="L758"><a href="#L758">758</a></th><td></td></tr><tr><th id="L759"><a href="#L759">759</a></th><td>        Gtk.Label new_title_label = new Gtk.Label.with_mnemonic(_("_title name:"));</td></tr><tr><th id="L760"><a href="#L760">760</a></th><td>        new_title_label.set_alignment(0.0f, 0.5f);</td></tr><tr><th id="L761"><a href="#L761">761</a></th><td>        main_table.attach(new_title_label, 1, 2, 4, 5,</td></tr><tr><th id="L762"><a href="#L762">762</a></th><td>            Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL,</td></tr><tr><th id="L763"><a href="#L763">763</a></th><td>            Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL, 4, 4);</td></tr><tr><th id="L764"><a href="#L764">764</a></th><td>            </td></tr><tr><th id="L765"><a href="#L765">765</a></th><td>        new_album_title_entry = new Gtk.Entry();</td></tr><tr><th id="L766"><a href="#L766">766</a></th><td>        new_album_title_entry.changed.connect(on_new_album_entry_changed);</td></tr><tr><th id="L767"><a href="#L767">767</a></th><td>        main_table.attach(new_album_title_entry, 2, 3, 4, 5,</td></tr><tr><th id="L768"><a href="#L768">768</a></th><td>            Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL,</td></tr><tr><th id="L769"><a href="#L769">769</a></th><td>            Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL, 4, 4);</td></tr><tr><th id="L770"><a href="#L770">770</a></th><td>        </td></tr><tr><th id="L771"><a href="#L771">771</a></th><td>        new_title_label.set_mnemonic_widget(new_album_title_entry);</td></tr><tr><th id="L772"><a href="#L772">772</a></th><td>        </td></tr><tr><th id="L773"><a href="#L773">773</a></th><td>        Gtk.SeparatorToolItem album_size_spacer = new Gtk.SeparatorToolItem();</td></tr><tr><th id="L774"><a href="#L774">774</a></th><td>        album_size_spacer.set_draw(false);</td></tr><tr><th id="L775"><a href="#L775">775</a></th><td>        album_size_spacer.set_size_request(-1, INTERSTITIAL_VERTICAL_SPACING / 2);</td></tr><tr><th id="L776"><a href="#L776">776</a></th><td>        main_table.attach(album_size_spacer, 3, 4, 4, 5,</td></tr><tr><th id="L777"><a href="#L777">777</a></th><td>            Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL,</td></tr><tr><th id="L778"><a href="#L778">778</a></th><td>            Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL, 4, 4);</td></tr><tr><th id="L779"><a href="#L779">779</a></th><td></td></tr><tr><th id="L780"><a href="#L780">780</a></th><td>        vert_packer.add(main_table);</td></tr><tr><th id="L781"><a href="#L781">781</a></th><td></td></tr><tr><th id="L782"><a href="#L782">782</a></th><td>        Gtk.SeparatorToolItem table_button_spacer = new Gtk.SeparatorToolItem();</td></tr><tr><th id="L783"><a href="#L783">783</a></th><td>        table_button_spacer.set_draw(false);</td></tr><tr><th id="L784"><a href="#L784">784</a></th><td>        table_button_spacer.set_size_request(-1, INTERSTITIAL_VERTICAL_SPACING);</td></tr><tr><th id="L785"><a href="#L785">785</a></th><td>        vert_packer.add(table_button_spacer);</td></tr><tr><th id="L786"><a href="#L786">786</a></th><td></td></tr><tr><th id="L787"><a href="#L787">787</a></th><td>        Gtk.HBox action_button_layouter = new Gtk.HBox(true, 0);</td></tr><tr><th id="L788"><a href="#L788">788</a></th><td></td></tr><tr><th id="L789"><a href="#L789">789</a></th><td>        Gtk.Button logout_button = new Gtk.Button.with_mnemonic(_("_Logout"));</td></tr><tr><th id="L790"><a href="#L790">790</a></th><td>        logout_button.clicked.connect(on_logout_clicked);</td></tr><tr><th id="L791"><a href="#L791">791</a></th><td>        logout_button.set_size_request(PublishingDialog.STANDARD_ACTION_BUTTON_WIDTH, -1);</td></tr><tr><th id="L792"><a href="#L792">792</a></th><td>        Gtk.Alignment logout_button_aligner = new Gtk.Alignment(0.5f, 0.5f, 0.0f, 0.0f);</td></tr><tr><th id="L793"><a href="#L793">793</a></th><td>        logout_button_aligner.add(logout_button);</td></tr><tr><th id="L794"><a href="#L794">794</a></th><td>        action_button_layouter.add(logout_button_aligner);</td></tr><tr><th id="L795"><a href="#L795">795</a></th><td>        Gtk.SeparatorToolItem button_spacer = new Gtk.SeparatorToolItem();</td></tr><tr><th id="L796"><a href="#L796">796</a></th><td>        button_spacer.set_draw(false);</td></tr><tr><th id="L797"><a href="#L797">797</a></th><td>        button_spacer.set_size_request(ACTION_BUTTON_SPACING, -1);</td></tr><tr><th id="L798"><a href="#L798">798</a></th><td>        action_button_layouter.add(button_spacer);</td></tr><tr><th id="L799"><a href="#L799">799</a></th><td>        publish_button = new Gtk.Button.with_mnemonic(_("_Publish"));</td></tr><tr><th id="L800"><a href="#L800">800</a></th><td>        publish_button.clicked.connect(on_publish_clicked);</td></tr><tr><th id="L801"><a href="#L801">801</a></th><td>        publish_button.set_size_request(PublishingDialog.STANDARD_ACTION_BUTTON_WIDTH, -1);</td></tr><tr><th id="L802"><a href="#L802">802</a></th><td>        Gtk.Alignment publish_button_aligner = new Gtk.Alignment(0.5f, 0.5f, 0.0f, 0.0f);</td></tr><tr><th id="L803"><a href="#L803">803</a></th><td>        publish_button_aligner.add(publish_button);</td></tr><tr><th id="L804"><a href="#L804">804</a></th><td>        action_button_layouter.add(publish_button_aligner);</td></tr><tr><th id="L805"><a href="#L805">805</a></th><td></td></tr><tr><th id="L806"><a href="#L806">806</a></th><td>        Gtk.Alignment action_button_wrapper = new Gtk.Alignment(0.5f, 0.5f, 0.0f, 0.0f);</td></tr><tr><th id="L807"><a href="#L807">807</a></th><td>        action_button_wrapper.add(action_button_layouter);</td></tr><tr><th id="L808"><a href="#L808">808</a></th><td></td></tr><tr><th id="L809"><a href="#L809">809</a></th><td>        vert_packer.add(action_button_wrapper);</td></tr><tr><th id="L810"><a href="#L810">810</a></th><td></td></tr><tr><th id="L811"><a href="#L811">811</a></th><td>        Gtk.SeparatorToolItem packer_bottom_padding = new Gtk.SeparatorToolItem();</td></tr><tr><th id="L812"><a href="#L812">812</a></th><td>        packer_bottom_padding.set_draw(false);</td></tr><tr><th id="L813"><a href="#L813">813</a></th><td>        packer_bottom_padding.set_size_request(-1, 2 * PACKER_VERTICAL_PADDING);</td></tr><tr><th id="L814"><a href="#L814">814</a></th><td>        vert_packer.add(packer_bottom_padding);</td></tr><tr><th id="L815"><a href="#L815">815</a></th><td></td></tr><tr><th id="L816"><a href="#L816">816</a></th><td>        Gtk.Alignment vert_packer_wrapper = new Gtk.Alignment(0.5f, 0.5f, 0.0f, 0.0f);</td></tr><tr><th id="L817"><a href="#L817">817</a></th><td>        vert_packer_wrapper.add(vert_packer);</td></tr><tr><th id="L818"><a href="#L818">818</a></th><td></td></tr><tr><th id="L819"><a href="#L819">819</a></th><td>        add(vert_packer_wrapper);</td></tr><tr><th id="L820"><a href="#L820">820</a></th><td>    }</td></tr><tr><th id="L821"><a href="#L821">821</a></th><td></td></tr><tr><th id="L822"><a href="#L822">822</a></th><td>    private void on_publish_clicked() {</td></tr><tr><th id="L823"><a href="#L823">823</a></th><td>        if (create_new_radio.get_active()) {</td></tr><tr><th id="L824"><a href="#L824">824</a></th><td>            string new_album_dir = new_album_dir_entry.get_text();</td></tr><tr><th id="L825"><a href="#L825">825</a></th><td>            string new_album_title = new_album_title_entry.get_text();</td></tr><tr><th id="L826"><a href="#L826">826</a></th><td>            publish(new PublishingParameters.to_new_album(albums[existing_albums_combo.get_active()].name, </td></tr><tr><th id="L827"><a href="#L827">827</a></th><td>                                                          new_album_dir.strip(), </td></tr><tr><th id="L828"><a href="#L828">828</a></th><td>                                                          new_album_title.strip()));</td></tr><tr><th id="L829"><a href="#L829">829</a></th><td>        } else {</td></tr><tr><th id="L830"><a href="#L830">830</a></th><td>            string album_name = albums[existing_albums_combo.get_active()].name;</td></tr><tr><th id="L831"><a href="#L831">831</a></th><td>            publish(new PublishingParameters.to_existing_album(album_name));</td></tr><tr><th id="L832"><a href="#L832">832</a></th><td>        }</td></tr><tr><th id="L833"><a href="#L833">833</a></th><td>    }</td></tr><tr><th id="L834"><a href="#L834">834</a></th><td></td></tr><tr><th id="L835"><a href="#L835">835</a></th><td>    private void on_use_existing_radio_clicked() {</td></tr><tr><th id="L836"><a href="#L836">836</a></th><td>        new_album_dir_entry.set_sensitive(false);</td></tr><tr><th id="L837"><a href="#L837">837</a></th><td>        new_album_title_entry.set_sensitive(false);</td></tr><tr><th id="L838"><a href="#L838">838</a></th><td>        existing_albums_combo.grab_focus();</td></tr><tr><th id="L839"><a href="#L839">839</a></th><td>        update_publish_button_sensitivity();</td></tr><tr><th id="L840"><a href="#L840">840</a></th><td>    }</td></tr><tr><th id="L841"><a href="#L841">841</a></th><td></td></tr><tr><th id="L842"><a href="#L842">842</a></th><td>    private void on_use_existing_albums_combo_update() {</td></tr><tr><th id="L843"><a href="#L843">843</a></th><td>        update_publish_button_sensitivity();</td></tr><tr><th id="L844"><a href="#L844">844</a></th><td>    }</td></tr><tr><th id="L845"><a href="#L845">845</a></th><td>    private void on_create_new_radio_clicked() {</td></tr><tr><th id="L846"><a href="#L846">846</a></th><td>        new_album_dir_entry.set_sensitive(true);</td></tr><tr><th id="L847"><a href="#L847">847</a></th><td>        new_album_title_entry.set_sensitive(true);</td></tr><tr><th id="L848"><a href="#L848">848</a></th><td>        new_album_dir_entry.grab_focus();</td></tr><tr><th id="L849"><a href="#L849">849</a></th><td>        update_publish_button_sensitivity();</td></tr><tr><th id="L850"><a href="#L850">850</a></th><td>    }</td></tr><tr><th id="L851"><a href="#L851">851</a></th><td></td></tr><tr><th id="L852"><a href="#L852">852</a></th><td>    private void on_logout_clicked() {</td></tr><tr><th id="L853"><a href="#L853">853</a></th><td>        logout();</td></tr><tr><th id="L854"><a href="#L854">854</a></th><td>    }</td></tr><tr><th id="L855"><a href="#L855">855</a></th><td></td></tr><tr><th id="L856"><a href="#L856">856</a></th><td>    private void update_publish_button_sensitivity() {</td></tr><tr><th id="L857"><a href="#L857">857</a></th><td>        if (existing_albums_combo.get_active() == -1)</td></tr><tr><th id="L858"><a href="#L858">858</a></th><td>        {</td></tr><tr><th id="L859"><a href="#L859">859</a></th><td>            publish_button.set_sensitive(false);</td></tr><tr><th id="L860"><a href="#L860">860</a></th><td>            return;</td></tr><tr><th id="L861"><a href="#L861">861</a></th><td>        }</td></tr><tr><th id="L862"><a href="#L862">862</a></th><td>        if (create_new_radio.get_active()) {</td></tr><tr><th id="L863"><a href="#L863">863</a></th><td>            string new_album_dir = new_album_dir_entry.get_text();</td></tr><tr><th id="L864"><a href="#L864">864</a></th><td>            publish_button.set_sensitive(albums[existing_albums_combo.get_active()].perms.create_sub &amp;&amp; (new_album_dir.strip() != ""));</td></tr><tr><th id="L865"><a href="#L865">865</a></th><td>        } else {</td></tr><tr><th id="L866"><a href="#L866">866</a></th><td>            publish_button.set_sensitive(albums[existing_albums_combo.get_active()].perms.add);</td></tr><tr><th id="L867"><a href="#L867">867</a></th><td>        }</td></tr><tr><th id="L868"><a href="#L868">868</a></th><td>    }</td></tr><tr><th id="L869"><a href="#L869">869</a></th><td></td></tr><tr><th id="L870"><a href="#L870">870</a></th><td>    private void on_new_album_entry_changed() {</td></tr><tr><th id="L871"><a href="#L871">871</a></th><td>        update_publish_button_sensitivity();</td></tr><tr><th id="L872"><a href="#L872">872</a></th><td>    }</td></tr><tr><th id="L873"><a href="#L873">873</a></th><td></td></tr><tr><th id="L874"><a href="#L874">874</a></th><td>    private SizeDescription[] create_size_descriptions() {</td></tr><tr><th id="L875"><a href="#L875">875</a></th><td>        SizeDescription[] result = new SizeDescription[0];</td></tr><tr><th id="L876"><a href="#L876">876</a></th><td></td></tr><tr><th id="L877"><a href="#L877">877</a></th><td>        result += SizeDescription(_("Small (640 x 480 pixels)"), 640);</td></tr><tr><th id="L878"><a href="#L878">878</a></th><td>        result += SizeDescription(_("Medium (1024 x 768 pixels)"), 1024);</td></tr><tr><th id="L879"><a href="#L879">879</a></th><td>        result += SizeDescription(_("Recommended (1600 x 1200 pixels)"), 1600);</td></tr><tr><th id="L880"><a href="#L880">880</a></th><td>        result += SizeDescription(_("Original Size"), ORIGINAL_SIZE);</td></tr><tr><th id="L881"><a href="#L881">881</a></th><td></td></tr><tr><th id="L882"><a href="#L882">882</a></th><td>        return result;</td></tr><tr><th id="L883"><a href="#L883">883</a></th><td>    }</td></tr><tr><th id="L884"><a href="#L884">884</a></th><td></td></tr><tr><th id="L885"><a href="#L885">885</a></th><td>    public override void installed() {</td></tr><tr><th id="L886"><a href="#L886">886</a></th><td>        int default_album_id = -1;</td></tr><tr><th id="L887"><a href="#L887">887</a></th><td>        for (int i = 0; i &lt; albums.length; i++) {</td></tr><tr><th id="L888"><a href="#L888">888</a></th><td>            existing_albums_combo.append_text(albums[i].title);</td></tr><tr><th id="L889"><a href="#L889">889</a></th><td>            if (albums[i].title == DEFAULT_ALBUM_TITLE)</td></tr><tr><th id="L890"><a href="#L890">890</a></th><td>                default_album_id = i;</td></tr><tr><th id="L891"><a href="#L891">891</a></th><td>        }</td></tr><tr><th id="L892"><a href="#L892">892</a></th><td></td></tr><tr><th id="L893"><a href="#L893">893</a></th><td>        if (albums.length == 0) {</td></tr><tr><th id="L894"><a href="#L894">894</a></th><td>            existing_albums_combo.set_sensitive(false);</td></tr><tr><th id="L895"><a href="#L895">895</a></th><td>            use_existing_radio.set_sensitive(false);</td></tr><tr><th id="L896"><a href="#L896">896</a></th><td>            create_new_radio.set_active(true);</td></tr><tr><th id="L897"><a href="#L897">897</a></th><td>            new_album_dir_entry.grab_focus();</td></tr><tr><th id="L898"><a href="#L898">898</a></th><td>            new_album_dir_entry.set_text(DEFAULT_ALBUM_DIR);</td></tr><tr><th id="L899"><a href="#L899">899</a></th><td>            new_album_title_entry.set_text(DEFAULT_ALBUM_TITLE);</td></tr><tr><th id="L900"><a href="#L900">900</a></th><td>        } else {</td></tr><tr><th id="L901"><a href="#L901">901</a></th><td>            if (default_album_id &gt;= 0) {</td></tr><tr><th id="L902"><a href="#L902">902</a></th><td>                use_existing_radio.set_active(true);</td></tr><tr><th id="L903"><a href="#L903">903</a></th><td>                existing_albums_combo.set_active(default_album_id);</td></tr><tr><th id="L904"><a href="#L904">904</a></th><td>            } else {</td></tr><tr><th id="L905"><a href="#L905">905</a></th><td>                create_new_radio.set_active(true);</td></tr><tr><th id="L906"><a href="#L906">906</a></th><td>                existing_albums_combo.set_active(0);</td></tr><tr><th id="L907"><a href="#L907">907</a></th><td>                new_album_dir_entry.grab_focus();</td></tr><tr><th id="L908"><a href="#L908">908</a></th><td>                new_album_dir_entry.set_text(DEFAULT_ALBUM_DIR);</td></tr><tr><th id="L909"><a href="#L909">909</a></th><td>                new_album_title_entry.set_text(DEFAULT_ALBUM_TITLE);</td></tr><tr><th id="L910"><a href="#L910">910</a></th><td>            }</td></tr><tr><th id="L911"><a href="#L911">911</a></th><td>        }</td></tr><tr><th id="L912"><a href="#L912">912</a></th><td>        update_publish_button_sensitivity();</td></tr><tr><th id="L913"><a href="#L913">913</a></th><td>    }</td></tr><tr><th id="L914"><a href="#L914">914</a></th><td>}</td></tr><tr><th id="L915"><a href="#L915">915</a></th><td></td></tr><tr><th id="L916"><a href="#L916">916</a></th><td></td></tr><tr><th id="L917"><a href="#L917">917</a></th><td>private class Session : RESTSession {</td></tr><tr><th id="L918"><a href="#L918">918</a></th><td>    private string password;</td></tr><tr><th id="L919"><a href="#L919">919</a></th><td>    private string username;</td></tr><tr><th id="L920"><a href="#L920">920</a></th><td>    private string url;</td></tr><tr><th id="L921"><a href="#L921">921</a></th><td>    private string auth_token;</td></tr><tr><th id="L922"><a href="#L922">922</a></th><td>    private string cookie;</td></tr><tr><th id="L923"><a href="#L923">923</a></th><td>    </td></tr><tr><th id="L924"><a href="#L924">924</a></th><td>    public Session() {</td></tr><tr><th id="L925"><a href="#L925">925</a></th><td>        base(""); </td></tr><tr><th id="L926"><a href="#L926">926</a></th><td>        if (has_persistent_state())</td></tr><tr><th id="L927"><a href="#L927">927</a></th><td>            load_persistent_state();</td></tr><tr><th id="L928"><a href="#L928">928</a></th><td>    }</td></tr><tr><th id="L929"><a href="#L929">929</a></th><td></td></tr><tr><th id="L930"><a href="#L930">930</a></th><td>    private bool has_persistent_state() {</td></tr><tr><th id="L931"><a href="#L931">931</a></th><td>        Config config = Config.get_instance();</td></tr><tr><th id="L932"><a href="#L932">932</a></th><td></td></tr><tr><th id="L933"><a href="#L933">933</a></th><td>        return ((config.get_publishing_string(CONFIG_NAME, "username") != null) &amp;&amp;</td></tr><tr><th id="L934"><a href="#L934">934</a></th><td>                (config.get_publishing_string(CONFIG_NAME, "password") != null) &amp;&amp;</td></tr><tr><th id="L935"><a href="#L935">935</a></th><td>                (config.get_publishing_string(CONFIG_NAME, "url") != null));</td></tr><tr><th id="L936"><a href="#L936">936</a></th><td>    }</td></tr><tr><th id="L937"><a href="#L937">937</a></th><td>    </td></tr><tr><th id="L938"><a href="#L938">938</a></th><td>    private void save_persistent_state() {</td></tr><tr><th id="L939"><a href="#L939">939</a></th><td>        Config config = Config.get_instance();</td></tr><tr><th id="L940"><a href="#L940">940</a></th><td></td></tr><tr><th id="L941"><a href="#L941">941</a></th><td>        config.set_publishing_string(CONFIG_NAME, "url", url);</td></tr><tr><th id="L942"><a href="#L942">942</a></th><td>        config.set_publishing_string(CONFIG_NAME, "username", username);</td></tr><tr><th id="L943"><a href="#L943">943</a></th><td>        config.set_publishing_string(CONFIG_NAME, "password", password);</td></tr><tr><th id="L944"><a href="#L944">944</a></th><td>    }</td></tr><tr><th id="L945"><a href="#L945">945</a></th><td></td></tr><tr><th id="L946"><a href="#L946">946</a></th><td>    private void load_persistent_state() {</td></tr><tr><th id="L947"><a href="#L947">947</a></th><td>        Config config = Config.get_instance();</td></tr><tr><th id="L948"><a href="#L948">948</a></th><td></td></tr><tr><th id="L949"><a href="#L949">949</a></th><td>        url = config.get_publishing_string(CONFIG_NAME, "url");</td></tr><tr><th id="L950"><a href="#L950">950</a></th><td>        username = config.get_publishing_string(CONFIG_NAME, "username");</td></tr><tr><th id="L951"><a href="#L951">951</a></th><td>        password = config.get_publishing_string(CONFIG_NAME, "password");</td></tr><tr><th id="L952"><a href="#L952">952</a></th><td>    }</td></tr><tr><th id="L953"><a href="#L953">953</a></th><td>    </td></tr><tr><th id="L954"><a href="#L954">954</a></th><td>    private void clear_persistent_state() {</td></tr><tr><th id="L955"><a href="#L955">955</a></th><td>        Config config = Config.get_instance();</td></tr><tr><th id="L956"><a href="#L956">956</a></th><td></td></tr><tr><th id="L957"><a href="#L957">957</a></th><td>        config.set_publishing_string(CONFIG_NAME, "url", "");</td></tr><tr><th id="L958"><a href="#L958">958</a></th><td>        config.set_publishing_string(CONFIG_NAME, "username", "");</td></tr><tr><th id="L959"><a href="#L959">959</a></th><td>        config.set_publishing_string(CONFIG_NAME, "password", "");</td></tr><tr><th id="L960"><a href="#L960">960</a></th><td>    }</td></tr><tr><th id="L961"><a href="#L961">961</a></th><td></td></tr><tr><th id="L962"><a href="#L962">962</a></th><td>    public bool is_authenticated() {</td></tr><tr><th id="L963"><a href="#L963">963</a></th><td>        return (password != null);</td></tr><tr><th id="L964"><a href="#L964">964</a></th><td>    }</td></tr><tr><th id="L965"><a href="#L965">965</a></th><td></td></tr><tr><th id="L966"><a href="#L966">966</a></th><td>    public void authenticate(string gallery_url, string username, string password, string auth_token, string cookie) {</td></tr><tr><th id="L967"><a href="#L967">967</a></th><td>        this.url = gallery_url;</td></tr><tr><th id="L968"><a href="#L968">968</a></th><td>        this.password = password;</td></tr><tr><th id="L969"><a href="#L969">969</a></th><td>        this.username = username;</td></tr><tr><th id="L970"><a href="#L970">970</a></th><td>        this.auth_token = auth_token;</td></tr><tr><th id="L971"><a href="#L971">971</a></th><td>        this.cookie = cookie ;</td></tr><tr><th id="L972"><a href="#L972">972</a></th><td>        </td></tr><tr><th id="L973"><a href="#L973">973</a></th><td>        save_persistent_state();</td></tr><tr><th id="L974"><a href="#L974">974</a></th><td>    }</td></tr><tr><th id="L975"><a href="#L975">975</a></th><td>    </td></tr><tr><th id="L976"><a href="#L976">976</a></th><td>    public void deauthenticate() {</td></tr><tr><th id="L977"><a href="#L977">977</a></th><td>        url = null;</td></tr><tr><th id="L978"><a href="#L978">978</a></th><td>        password = null;</td></tr><tr><th id="L979"><a href="#L979">979</a></th><td>        username = null;</td></tr><tr><th id="L980"><a href="#L980">980</a></th><td>        cookie = null;</td></tr><tr><th id="L981"><a href="#L981">981</a></th><td>        auth_token = null;</td></tr><tr><th id="L982"><a href="#L982">982</a></th><td>        </td></tr><tr><th id="L983"><a href="#L983">983</a></th><td>        clear_persistent_state();</td></tr><tr><th id="L984"><a href="#L984">984</a></th><td>    }</td></tr><tr><th id="L985"><a href="#L985">985</a></th><td></td></tr><tr><th id="L986"><a href="#L986">986</a></th><td>    public string get_username() {</td></tr><tr><th id="L987"><a href="#L987">987</a></th><td>        return username;</td></tr><tr><th id="L988"><a href="#L988">988</a></th><td>    }</td></tr><tr><th id="L989"><a href="#L989">989</a></th><td></td></tr><tr><th id="L990"><a href="#L990">990</a></th><td>    public string get_password() {</td></tr><tr><th id="L991"><a href="#L991">991</a></th><td>        return password;</td></tr><tr><th id="L992"><a href="#L992">992</a></th><td>    }</td></tr><tr><th id="L993"><a href="#L993">993</a></th><td>    </td></tr><tr><th id="L994"><a href="#L994">994</a></th><td>    public string get_gallery_url() {</td></tr><tr><th id="L995"><a href="#L995">995</a></th><td>        return url;</td></tr><tr><th id="L996"><a href="#L996">996</a></th><td>    }</td></tr><tr><th id="L997"><a href="#L997">997</a></th><td>    </td></tr><tr><th id="L998"><a href="#L998">998</a></th><td>    public string get_auth_token() {</td></tr><tr><th id="L999"><a href="#L999">999</a></th><td>        return auth_token;</td></tr><tr><th id="L1000"><a href="#L1000">1000</a></th><td>    }</td></tr><tr><th id="L1001"><a href="#L1001">1001</a></th><td>    </td></tr><tr><th id="L1002"><a href="#L1002">1002</a></th><td>    public string get_cookie() {</td></tr><tr><th id="L1003"><a href="#L1003">1003</a></th><td>        return cookie;</td></tr><tr><th id="L1004"><a href="#L1004">1004</a></th><td>    }</td></tr><tr><th id="L1005"><a href="#L1005">1005</a></th><td>}</td></tr><tr><th id="L1006"><a href="#L1006">1006</a></th><td></td></tr><tr><th id="L1007"><a href="#L1007">1007</a></th><td>private class Uploader : BatchUploader {</td></tr><tr><th id="L1008"><a href="#L1008">1008</a></th><td>    private Session session;</td></tr><tr><th id="L1009"><a href="#L1009">1009</a></th><td>    private PublishingParameters parameters;</td></tr><tr><th id="L1010"><a href="#L1010">1010</a></th><td></td></tr><tr><th id="L1011"><a href="#L1011">1011</a></th><td>    public Uploader(Session session, PublishingParameters params, Photo[] photos) {</td></tr><tr><th id="L1012"><a href="#L1012">1012</a></th><td>        base(photos);</td></tr><tr><th id="L1013"><a href="#L1013">1013</a></th><td></td></tr><tr><th id="L1014"><a href="#L1014">1014</a></th><td>        this.session = session;</td></tr><tr><th id="L1015"><a href="#L1015">1015</a></th><td>        this.parameters = params;</td></tr><tr><th id="L1016"><a href="#L1016">1016</a></th><td>    }</td></tr><tr><th id="L1017"><a href="#L1017">1017</a></th><td></td></tr><tr><th id="L1018"><a href="#L1018">1018</a></th><td>    protected override bool prepare_file(BatchUploader.TemporaryFileDescriptor file) {</td></tr><tr><th id="L1019"><a href="#L1019">1019</a></th><td>        Scaling scaling = Scaling.for_original();</td></tr><tr><th id="L1020"><a href="#L1020">1020</a></th><td>        </td></tr><tr><th id="L1021"><a href="#L1021">1021</a></th><td>        try {</td></tr><tr><th id="L1022"><a href="#L1022">1022</a></th><td>            if (file.media is Photo) {</td></tr><tr><th id="L1023"><a href="#L1023">1023</a></th><td>                ((Photo) file.media).export(file.temp_file, scaling, Jpeg.Quality.MAXIMUM,</td></tr><tr><th id="L1024"><a href="#L1024">1024</a></th><td>                    PhotoFileFormat.JFIF);</td></tr><tr><th id="L1025"><a href="#L1025">1025</a></th><td>            }</td></tr><tr><th id="L1026"><a href="#L1026">1026</a></th><td>        } catch (Error e) {</td></tr><tr><th id="L1027"><a href="#L1027">1027</a></th><td>            return false;</td></tr><tr><th id="L1028"><a href="#L1028">1028</a></th><td>        }</td></tr><tr><th id="L1029"><a href="#L1029">1029</a></th><td>        </td></tr><tr><th id="L1030"><a href="#L1030">1030</a></th><td>        return true;</td></tr><tr><th id="L1031"><a href="#L1031">1031</a></th><td>    }</td></tr><tr><th id="L1032"><a href="#L1032">1032</a></th><td></td></tr><tr><th id="L1033"><a href="#L1033">1033</a></th><td>    protected override RESTTransaction create_transaction_for_file(</td></tr><tr><th id="L1034"><a href="#L1034">1034</a></th><td>        BatchUploader.TemporaryFileDescriptor file) {</td></tr><tr><th id="L1035"><a href="#L1035">1035</a></th><td>        return new GalleryUploadTransaction(session, parameters,  file.temp_file.get_path(), file.media);</td></tr><tr><th id="L1036"><a href="#L1036">1036</a></th><td>    }</td></tr><tr><th id="L1037"><a href="#L1037">1037</a></th><td>}</td></tr><tr><th id="L1038"><a href="#L1038">1038</a></th><td></td></tr><tr><th id="L1039"><a href="#L1039">1039</a></th><td>private class AlbumCreationTransaction : AuthenticatedTransaction {</td></tr><tr><th id="L1040"><a href="#L1040">1040</a></th><td>    public AlbumCreationTransaction(Session session, string url, PublishingParameters parameters) {</td></tr><tr><th id="L1041"><a href="#L1041">1041</a></th><td>        base(session, url);</td></tr><tr><th id="L1042"><a href="#L1042">1042</a></th><td></td></tr><tr><th id="L1043"><a href="#L1043">1043</a></th><td>        add_argument("g2_form[cmd]", "new-album");</td></tr><tr><th id="L1044"><a href="#L1044">1044</a></th><td>        add_argument("g2_form[set_albumName]", parameters.parent_name);</td></tr><tr><th id="L1045"><a href="#L1045">1045</a></th><td>        add_argument("g2_form[newAlbumName]", parameters.album_dir);</td></tr><tr><th id="L1046"><a href="#L1046">1046</a></th><td>        add_argument("g2_form[newAlbumTitle]", parameters.album_title);</td></tr><tr><th id="L1047"><a href="#L1047">1047</a></th><td>        add_argument("g2_form[newAlbumDesc]", "");</td></tr><tr><th id="L1048"><a href="#L1048">1048</a></th><td>    }</td></tr><tr><th id="L1049"><a href="#L1049">1049</a></th><td>}</td></tr><tr><th id="L1050"><a href="#L1050">1050</a></th><td></td></tr><tr><th id="L1051"><a href="#L1051">1051</a></th><td>private class GalleryUploadTransaction : MediaUploadTransaction {</td></tr><tr><th id="L1052"><a href="#L1052">1052</a></th><td>    private Session session_copy = null;</td></tr><tr><th id="L1053"><a href="#L1053">1053</a></th><td>    private string source_file;</td></tr><tr><th id="L1054"><a href="#L1054">1054</a></th><td>    private MediaSource media;</td></tr><tr><th id="L1055"><a href="#L1055">1055</a></th><td>    private GLib.HashTable&lt;string, string&gt; binary_disposition_table = null;</td></tr><tr><th id="L1056"><a href="#L1056">1056</a></th><td>        </td></tr><tr><th id="L1057"><a href="#L1057">1057</a></th><td>    public GalleryUploadTransaction(Session session, PublishingParameters params, </td></tr><tr><th id="L1058"><a href="#L1058">1058</a></th><td>                                       string source_file, MediaSource media_source) {</td></tr><tr><th id="L1059"><a href="#L1059">1059</a></th><td>        base.with_endpoint_url(session, session.get_gallery_url(), source_file, media_source);</td></tr><tr><th id="L1060"><a href="#L1060">1060</a></th><td>        assert(session.is_authenticated());</td></tr><tr><th id="L1061"><a href="#L1061">1061</a></th><td>        </td></tr><tr><th id="L1062"><a href="#L1062">1062</a></th><td>        this.session_copy = session;</td></tr><tr><th id="L1063"><a href="#L1063">1063</a></th><td>        this.source_file = source_file;</td></tr><tr><th id="L1064"><a href="#L1064">1064</a></th><td>        this.media = media_source;</td></tr><tr><th id="L1065"><a href="#L1065">1065</a></th><td>        </td></tr><tr><th id="L1066"><a href="#L1066">1066</a></th><td>        debug("GalleryUploadTransaction upload file %s", media.get_name());</td></tr><tr><th id="L1067"><a href="#L1067">1067</a></th><td>        </td></tr><tr><th id="L1068"><a href="#L1068">1068</a></th><td>        add_argument("g2_form[cmd]", "add-item");</td></tr><tr><th id="L1069"><a href="#L1069">1069</a></th><td>        add_argument("g2_form[protocol_version]", "2.10");</td></tr><tr><th id="L1070"><a href="#L1070">1070</a></th><td>        add_argument("g2_form[set_albumName]", params.album_name);</td></tr><tr><th id="L1071"><a href="#L1071">1071</a></th><td>        // TODO: add_argument("g2_form[caption]", "");</td></tr><tr><th id="L1072"><a href="#L1072">1072</a></th><td>        add_argument("g2_form[userfile_name]", media.get_name());</td></tr><tr><th id="L1073"><a href="#L1073">1073</a></th><td>        add_argument("g2_form[force_filename]", media.get_name());</td></tr><tr><th id="L1074"><a href="#L1074">1074</a></th><td>        add_argument("g2_form[auto_rotate]", "yes");</td></tr><tr><th id="L1075"><a href="#L1075">1075</a></th><td>        add_argument("g2_authToken", session.get_auth_token());</td></tr><tr><th id="L1076"><a href="#L1076">1076</a></th><td>        add_argument("g2_controller", "remote.GalleryRemote");</td></tr><tr><th id="L1077"><a href="#L1077">1077</a></th><td>        </td></tr><tr><th id="L1078"><a href="#L1078">1078</a></th><td>        GLib.HashTable&lt;string, string&gt; disposition_table =</td></tr><tr><th id="L1079"><a href="#L1079">1079</a></th><td>            new GLib.HashTable&lt;string, string&gt;(GLib.str_hash, GLib.str_equal);</td></tr><tr><th id="L1080"><a href="#L1080">1080</a></th><td>        disposition_table.insert("filename", media.get_name());</td></tr><tr><th id="L1081"><a href="#L1081">1081</a></th><td>        disposition_table.insert("name", "g2_userfile");</td></tr><tr><th id="L1082"><a href="#L1082">1082</a></th><td>        set_binary_disposition_table(disposition_table);</td></tr><tr><th id="L1083"><a href="#L1083">1083</a></th><td>    }</td></tr><tr><th id="L1084"><a href="#L1084">1084</a></th><td>    </td></tr><tr><th id="L1085"><a href="#L1085">1085</a></th><td>    protected new void set_binary_disposition_table(GLib.HashTable&lt;string, string&gt; new_disp_table) {</td></tr><tr><th id="L1086"><a href="#L1086">1086</a></th><td>        binary_disposition_table = new_disp_table;</td></tr><tr><th id="L1087"><a href="#L1087">1087</a></th><td>    }</td></tr><tr><th id="L1088"><a href="#L1088">1088</a></th><td>    </td></tr><tr><th id="L1089"><a href="#L1089">1089</a></th><td>    // Need to copy and paste this method to add the cookie header to the sent message.</td></tr><tr><th id="L1090"><a href="#L1090">1090</a></th><td>    public override void execute() {</td></tr><tr><th id="L1091"><a href="#L1091">1091</a></th><td></td></tr><tr><th id="L1092"><a href="#L1092">1092</a></th><td>        RESTArgument[] request_arguments = get_arguments();</td></tr><tr><th id="L1093"><a href="#L1093">1093</a></th><td>        assert(request_arguments.length &gt; 0);</td></tr><tr><th id="L1094"><a href="#L1094">1094</a></th><td></td></tr><tr><th id="L1095"><a href="#L1095">1095</a></th><td>        // create the multipart request container</td></tr><tr><th id="L1096"><a href="#L1096">1096</a></th><td>        Soup.Multipart message_parts = new Soup.Multipart("multipart/form-data");</td></tr><tr><th id="L1097"><a href="#L1097">1097</a></th><td></td></tr><tr><th id="L1098"><a href="#L1098">1098</a></th><td>        // attach each REST argument as its own multipart formdata part</td></tr><tr><th id="L1099"><a href="#L1099">1099</a></th><td>        foreach (RESTArgument arg in request_arguments)</td></tr><tr><th id="L1100"><a href="#L1100">1100</a></th><td>            message_parts.append_form_string(arg.key, arg.value);</td></tr><tr><th id="L1101"><a href="#L1101">1101</a></th><td></td></tr><tr><th id="L1102"><a href="#L1102">1102</a></th><td>        // attempt to read the binary image data from disk</td></tr><tr><th id="L1103"><a href="#L1103">1103</a></th><td>        string photo_data;</td></tr><tr><th id="L1104"><a href="#L1104">1104</a></th><td>        size_t data_length;</td></tr><tr><th id="L1105"><a href="#L1105">1105</a></th><td>        try {</td></tr><tr><th id="L1106"><a href="#L1106">1106</a></th><td>            FileUtils.get_contents(source_file, out photo_data, out data_length);</td></tr><tr><th id="L1107"><a href="#L1107">1107</a></th><td>        } catch (FileError e) {</td></tr><tr><th id="L1108"><a href="#L1108">1108</a></th><td>            error("PhotoUploadTransaction: couldn't read data from file '%s'", source_file);</td></tr><tr><th id="L1109"><a href="#L1109">1109</a></th><td>        }</td></tr><tr><th id="L1110"><a href="#L1110">1110</a></th><td></td></tr><tr><th id="L1111"><a href="#L1111">1111</a></th><td>        // get the sequence number of the part that will soon become the binary image data</td></tr><tr><th id="L1112"><a href="#L1112">1112</a></th><td>        // part</td></tr><tr><th id="L1113"><a href="#L1113">1113</a></th><td>        int image_part_num = message_parts.get_length();</td></tr><tr><th id="L1114"><a href="#L1114">1114</a></th><td></td></tr><tr><th id="L1115"><a href="#L1115">1115</a></th><td>        // bind the binary image data read from disk into a Soup.Buffer object so that we</td></tr><tr><th id="L1116"><a href="#L1116">1116</a></th><td>        // can attach it to the multipart request, then actaully append the buffer</td></tr><tr><th id="L1117"><a href="#L1117">1117</a></th><td>        // to the multipart request. Then, set the MIME type for this part.</td></tr><tr><th id="L1118"><a href="#L1118">1118</a></th><td>        Soup.Buffer bindable_data = new Soup.Buffer(Soup.MemoryUse.COPY, photo_data, data_length);</td></tr><tr><th id="L1119"><a href="#L1119">1119</a></th><td>        message_parts.append_form_file("", source_file, "image/jpeg", bindable_data);</td></tr><tr><th id="L1120"><a href="#L1120">1120</a></th><td></td></tr><tr><th id="L1121"><a href="#L1121">1121</a></th><td>        // set up the Content-Disposition header for the multipart part that contains the</td></tr><tr><th id="L1122"><a href="#L1122">1122</a></th><td>        // binary image data</td></tr><tr><th id="L1123"><a href="#L1123">1123</a></th><td>        unowned Soup.MessageHeaders image_part_header;</td></tr><tr><th id="L1124"><a href="#L1124">1124</a></th><td>        unowned Soup.Buffer image_part_body;</td></tr><tr><th id="L1125"><a href="#L1125">1125</a></th><td>        message_parts.get_part(image_part_num, out image_part_header, out image_part_body);</td></tr><tr><th id="L1126"><a href="#L1126">1126</a></th><td>        image_part_header.set_content_disposition("form-data", binary_disposition_table);</td></tr><tr><th id="L1127"><a href="#L1127">1127</a></th><td></td></tr><tr><th id="L1128"><a href="#L1128">1128</a></th><td>        // create a message that can be sent over the wire whose payload is the multipart container</td></tr><tr><th id="L1129"><a href="#L1129">1129</a></th><td>        // that we've been building up</td></tr><tr><th id="L1130"><a href="#L1130">1130</a></th><td>        Soup.Message outbound_message = Soup.form_request_new_from_multipart(get_endpoint_url(), message_parts);</td></tr><tr><th id="L1131"><a href="#L1131">1131</a></th><td>        outbound_message.request_headers.append("Cookie", session_copy.get_cookie());</td></tr><tr><th id="L1132"><a href="#L1132">1132</a></th><td>        set_message(outbound_message);</td></tr><tr><th id="L1133"><a href="#L1133">1133</a></th><td></td></tr><tr><th id="L1134"><a href="#L1134">1134</a></th><td>        // send the message and get its response</td></tr><tr><th id="L1135"><a href="#L1135">1135</a></th><td>        set_is_executed(true);</td></tr><tr><th id="L1136"><a href="#L1136">1136</a></th><td>        send();</td></tr><tr><th id="L1137"><a href="#L1137">1137</a></th><td>    }</td></tr><tr><th id="L1138"><a href="#L1138">1138</a></th><td>}</td></tr><tr><th id="L1139"><a href="#L1139">1139</a></th><td></td></tr><tr><th id="L1140"><a href="#L1140">1140</a></th><td>private class GalleryConfigurePane : PublishingDialogPane {</td></tr><tr><th id="L1141"><a href="#L1141">1141</a></th><td>    public enum Mode {</td></tr><tr><th id="L1142"><a href="#L1142">1142</a></th><td>        INTRO,</td></tr><tr><th id="L1143"><a href="#L1143">1143</a></th><td>        FAILED_RETRY,</td></tr><tr><th id="L1144"><a href="#L1144">1144</a></th><td>        NOT_GALLERY_URL</td></tr><tr><th id="L1145"><a href="#L1145">1145</a></th><td>    }</td></tr><tr><th id="L1146"><a href="#L1146">1146</a></th><td>    private const string INTRO_MESSAGE = _("Enter the Gallery name and address and login and password associated with this Gallery.");</td></tr><tr><th id="L1147"><a href="#L1147">1147</a></th><td>    private const string FAILED_RETRY_MESSAGE = _("Retry message");</td></tr><tr><th id="L1148"><a href="#L1148">1148</a></th><td>    private const string NOT_GALLERY_URL_MESSAGE = _("Not a gallery url");</td></tr><tr><th id="L1149"><a href="#L1149">1149</a></th><td>    </td></tr><tr><th id="L1150"><a href="#L1150">1150</a></th><td>    private const int UNIFORM_ACTION_BUTTON_WIDTH = 102;</td></tr><tr><th id="L1151"><a href="#L1151">1151</a></th><td></td></tr><tr><th id="L1152"><a href="#L1152">1152</a></th><td>    private Gtk.Entry gallery_url_entry;</td></tr><tr><th id="L1153"><a href="#L1153">1153</a></th><td>    private Gtk.Entry uname_entry;</td></tr><tr><th id="L1154"><a href="#L1154">1154</a></th><td>    private Gtk.Entry password_entry;</td></tr><tr><th id="L1155"><a href="#L1155">1155</a></th><td>    private Gtk.Button login_button;</td></tr><tr><th id="L1156"><a href="#L1156">1156</a></th><td>    private Gtk.Button go_back_button;</td></tr><tr><th id="L1157"><a href="#L1157">1157</a></th><td>    private weak Interactor interactor;</td></tr><tr><th id="L1158"><a href="#L1158">1158</a></th><td></td></tr><tr><th id="L1159"><a href="#L1159">1159</a></th><td>    public signal void go_back();</td></tr><tr><th id="L1160"><a href="#L1160">1160</a></th><td>    public signal void login(string gallery_url, string uname, string password);</td></tr><tr><th id="L1161"><a href="#L1161">1161</a></th><td></td></tr><tr><th id="L1162"><a href="#L1162">1162</a></th><td>    public GalleryConfigurePane(Interactor interactor, Mode mode = Mode.INTRO) {</td></tr><tr><th id="L1163"><a href="#L1163">1163</a></th><td>        this.interactor = interactor;</td></tr><tr><th id="L1164"><a href="#L1164">1164</a></th><td></td></tr><tr><th id="L1165"><a href="#L1165">1165</a></th><td>        Gtk.SeparatorToolItem top_space = new Gtk.SeparatorToolItem();</td></tr><tr><th id="L1166"><a href="#L1166">1166</a></th><td>        top_space.set_draw(false);</td></tr><tr><th id="L1167"><a href="#L1167">1167</a></th><td>        Gtk.SeparatorToolItem bottom_space = new Gtk.SeparatorToolItem();</td></tr><tr><th id="L1168"><a href="#L1168">1168</a></th><td>        bottom_space.set_draw(false);</td></tr><tr><th id="L1169"><a href="#L1169">1169</a></th><td>        add(top_space);</td></tr><tr><th id="L1170"><a href="#L1170">1170</a></th><td>        top_space.set_size_request(-1, 40);</td></tr><tr><th id="L1171"><a href="#L1171">1171</a></th><td></td></tr><tr><th id="L1172"><a href="#L1172">1172</a></th><td>        Gtk.Label intro_message_label = new Gtk.Label("");</td></tr><tr><th id="L1173"><a href="#L1173">1173</a></th><td>        intro_message_label.set_line_wrap(true);</td></tr><tr><th id="L1174"><a href="#L1174">1174</a></th><td>        add(intro_message_label);</td></tr><tr><th id="L1175"><a href="#L1175">1175</a></th><td>        intro_message_label.set_size_request(PublishingDialog.STANDARD_CONTENT_LABEL_WIDTH, -1);</td></tr><tr><th id="L1176"><a href="#L1176">1176</a></th><td>        intro_message_label.set_alignment(0.5f, 0.0f);</td></tr><tr><th id="L1177"><a href="#L1177">1177</a></th><td>        switch (mode) {</td></tr><tr><th id="L1178"><a href="#L1178">1178</a></th><td>            case Mode.INTRO:</td></tr><tr><th id="L1179"><a href="#L1179">1179</a></th><td>                intro_message_label.set_text(INTRO_MESSAGE);</td></tr><tr><th id="L1180"><a href="#L1180">1180</a></th><td>            break;</td></tr><tr><th id="L1181"><a href="#L1181">1181</a></th><td></td></tr><tr><th id="L1182"><a href="#L1182">1182</a></th><td>            case Mode.FAILED_RETRY:</td></tr><tr><th id="L1183"><a href="#L1183">1183</a></th><td>                intro_message_label.set_markup("&lt;b&gt;%s&lt;/b&gt;\n\n%s".printf(_(</td></tr><tr><th id="L1184"><a href="#L1184">1184</a></th><td>                    "Unrecognized User"), FAILED_RETRY_MESSAGE));</td></tr><tr><th id="L1185"><a href="#L1185">1185</a></th><td>            break;</td></tr><tr><th id="L1186"><a href="#L1186">1186</a></th><td></td></tr><tr><th id="L1187"><a href="#L1187">1187</a></th><td>            case Mode.NOT_GALLERY_URL:</td></tr><tr><th id="L1188"><a href="#L1188">1188</a></th><td>                intro_message_label.set_markup("&lt;b&gt;%s&lt;/b&gt;\n\n%s".printf(_("This is not a Gallery Url"),</td></tr><tr><th id="L1189"><a href="#L1189">1189</a></th><td>                    NOT_GALLERY_URL_MESSAGE));</td></tr><tr><th id="L1190"><a href="#L1190">1190</a></th><td>                Gtk.SeparatorToolItem long_message_space = new Gtk.SeparatorToolItem();</td></tr><tr><th id="L1191"><a href="#L1191">1191</a></th><td>                long_message_space.set_draw(false);</td></tr><tr><th id="L1192"><a href="#L1192">1192</a></th><td>                add(long_message_space);</td></tr><tr><th id="L1193"><a href="#L1193">1193</a></th><td>                long_message_space.set_size_request(-1, 40);</td></tr><tr><th id="L1194"><a href="#L1194">1194</a></th><td>            break;</td></tr><tr><th id="L1195"><a href="#L1195">1195</a></th><td>        }</td></tr><tr><th id="L1196"><a href="#L1196">1196</a></th><td></td></tr><tr><th id="L1197"><a href="#L1197">1197</a></th><td>        Gtk.Alignment entry_widgets_table_aligner = new Gtk.Alignment(0.5f, 0.5f, 0.0f, 0.0f);</td></tr><tr><th id="L1198"><a href="#L1198">1198</a></th><td>        Gtk.Table entry_widgets_table = new Gtk.Table(4,2, false);</td></tr><tr><th id="L1199"><a href="#L1199">1199</a></th><td>        Gtk.Label gallery_url_entry_label = new Gtk.Label.with_mnemonic(_("_URL:"));</td></tr><tr><th id="L1200"><a href="#L1200">1200</a></th><td>        gallery_url_entry_label.set_alignment(0.0f, 0.5f);</td></tr><tr><th id="L1201"><a href="#L1201">1201</a></th><td>        Gtk.Label uname_entry_label = new Gtk.Label.with_mnemonic(_("_Login:"));</td></tr><tr><th id="L1202"><a href="#L1202">1202</a></th><td>        uname_entry_label.set_alignment(0.0f, 0.5f);</td></tr><tr><th id="L1203"><a href="#L1203">1203</a></th><td>        Gtk.Label password_entry_label = new Gtk.Label.with_mnemonic(_("_Password:"));</td></tr><tr><th id="L1204"><a href="#L1204">1204</a></th><td>        password_entry_label.set_alignment(0.0f, 0.5f);</td></tr><tr><th id="L1205"><a href="#L1205">1205</a></th><td>        gallery_url_entry = new Gtk.Entry();</td></tr><tr><th id="L1206"><a href="#L1206">1206</a></th><td>        gallery_url_entry.changed.connect(on_uname_gallery_url_changed);</td></tr><tr><th id="L1207"><a href="#L1207">1207</a></th><td>        uname_entry = new Gtk.Entry();</td></tr><tr><th id="L1208"><a href="#L1208">1208</a></th><td>        uname_entry.changed.connect(on_uname_gallery_url_changed);</td></tr><tr><th id="L1209"><a href="#L1209">1209</a></th><td>        password_entry = new Gtk.Entry();</td></tr><tr><th id="L1210"><a href="#L1210">1210</a></th><td>        password_entry.set_visibility(false);</td></tr><tr><th id="L1211"><a href="#L1211">1211</a></th><td>        entry_widgets_table.attach(gallery_url_entry_label, 0, 1, 0, 1,</td></tr><tr><th id="L1212"><a href="#L1212">1212</a></th><td>            Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL,</td></tr><tr><th id="L1213"><a href="#L1213">1213</a></th><td>            Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL, 6, 6);</td></tr><tr><th id="L1214"><a href="#L1214">1214</a></th><td>        entry_widgets_table.attach(uname_entry_label, 0, 1, 1, 2,</td></tr><tr><th id="L1215"><a href="#L1215">1215</a></th><td>            Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL,</td></tr><tr><th id="L1216"><a href="#L1216">1216</a></th><td>            Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL, 6, 6);</td></tr><tr><th id="L1217"><a href="#L1217">1217</a></th><td>        entry_widgets_table.attach(password_entry_label, 0, 1, 2, 3,</td></tr><tr><th id="L1218"><a href="#L1218">1218</a></th><td>            Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL,</td></tr><tr><th id="L1219"><a href="#L1219">1219</a></th><td>            Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL, 6, 6);</td></tr><tr><th id="L1220"><a href="#L1220">1220</a></th><td>        entry_widgets_table.attach(gallery_url_entry, 1, 2, 0, 1,</td></tr><tr><th id="L1221"><a href="#L1221">1221</a></th><td>            Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL,</td></tr><tr><th id="L1222"><a href="#L1222">1222</a></th><td>            Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL, 6, 6);</td></tr><tr><th id="L1223"><a href="#L1223">1223</a></th><td>        entry_widgets_table.attach(uname_entry, 1, 2, 1, 2,</td></tr><tr><th id="L1224"><a href="#L1224">1224</a></th><td>            Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL,</td></tr><tr><th id="L1225"><a href="#L1225">1225</a></th><td>            Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL, 6, 6);</td></tr><tr><th id="L1226"><a href="#L1226">1226</a></th><td>        entry_widgets_table.attach(password_entry, 1, 2, 2, 3,</td></tr><tr><th id="L1227"><a href="#L1227">1227</a></th><td>            Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL,</td></tr><tr><th id="L1228"><a href="#L1228">1228</a></th><td>            Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL, 6, 6);</td></tr><tr><th id="L1229"><a href="#L1229">1229</a></th><td>        go_back_button = new Gtk.Button.with_mnemonic(_("Go _Back"));</td></tr><tr><th id="L1230"><a href="#L1230">1230</a></th><td>        go_back_button.clicked.connect(on_go_back_button_clicked);</td></tr><tr><th id="L1231"><a href="#L1231">1231</a></th><td>        Gtk.Alignment go_back_button_aligner = new Gtk.Alignment(0.0f, 0.5f, 0.0f, 0.0f);</td></tr><tr><th id="L1232"><a href="#L1232">1232</a></th><td>        go_back_button_aligner.add(go_back_button);</td></tr><tr><th id="L1233"><a href="#L1233">1233</a></th><td>        go_back_button.set_size_request(UNIFORM_ACTION_BUTTON_WIDTH, -1);</td></tr><tr><th id="L1234"><a href="#L1234">1234</a></th><td>        login_button = new Gtk.Button.with_mnemonic(_("_Login"));</td></tr><tr><th id="L1235"><a href="#L1235">1235</a></th><td>        login_button.clicked.connect(on_login_button_clicked);</td></tr><tr><th id="L1236"><a href="#L1236">1236</a></th><td>        login_button.set_sensitive(false);</td></tr><tr><th id="L1237"><a href="#L1237">1237</a></th><td>        Gtk.Alignment login_button_aligner = new Gtk.Alignment(1.0f, 0.5f, 0.0f, 0.0f);</td></tr><tr><th id="L1238"><a href="#L1238">1238</a></th><td>        login_button_aligner.add(login_button);</td></tr><tr><th id="L1239"><a href="#L1239">1239</a></th><td>        login_button.set_size_request(UNIFORM_ACTION_BUTTON_WIDTH, -1);</td></tr><tr><th id="L1240"><a href="#L1240">1240</a></th><td>        entry_widgets_table.attach(go_back_button_aligner, 0, 1, 3, 4,</td></tr><tr><th id="L1241"><a href="#L1241">1241</a></th><td>            Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL,</td></tr><tr><th id="L1242"><a href="#L1242">1242</a></th><td>            Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL, 6, 40);</td></tr><tr><th id="L1243"><a href="#L1243">1243</a></th><td>        entry_widgets_table.attach(login_button_aligner, 1, 2, 3, 4,</td></tr><tr><th id="L1244"><a href="#L1244">1244</a></th><td>            Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL,</td></tr><tr><th id="L1245"><a href="#L1245">1245</a></th><td>            Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL, 6, 40);</td></tr><tr><th id="L1246"><a href="#L1246">1246</a></th><td>        entry_widgets_table_aligner.add(entry_widgets_table);</td></tr><tr><th id="L1247"><a href="#L1247">1247</a></th><td>        add(entry_widgets_table_aligner);</td></tr><tr><th id="L1248"><a href="#L1248">1248</a></th><td></td></tr><tr><th id="L1249"><a href="#L1249">1249</a></th><td>        uname_entry_label.set_mnemonic_widget(uname_entry);</td></tr><tr><th id="L1250"><a href="#L1250">1250</a></th><td>        password_entry_label.set_mnemonic_widget(password_entry);</td></tr><tr><th id="L1251"><a href="#L1251">1251</a></th><td></td></tr><tr><th id="L1252"><a href="#L1252">1252</a></th><td>        add(bottom_space);</td></tr><tr><th id="L1253"><a href="#L1253">1253</a></th><td>        bottom_space.set_size_request(-1, 40);</td></tr><tr><th id="L1254"><a href="#L1254">1254</a></th><td>    }</td></tr><tr><th id="L1255"><a href="#L1255">1255</a></th><td></td></tr><tr><th id="L1256"><a href="#L1256">1256</a></th><td>    private void on_login_button_clicked() {</td></tr><tr><th id="L1257"><a href="#L1257">1257</a></th><td>        login(gallery_url_entry.get_text(), uname_entry.get_text(), password_entry.get_text());</td></tr><tr><th id="L1258"><a href="#L1258">1258</a></th><td>    }</td></tr><tr><th id="L1259"><a href="#L1259">1259</a></th><td></td></tr><tr><th id="L1260"><a href="#L1260">1260</a></th><td>    private void on_go_back_button_clicked() {</td></tr><tr><th id="L1261"><a href="#L1261">1261</a></th><td>        go_back();</td></tr><tr><th id="L1262"><a href="#L1262">1262</a></th><td>    }</td></tr><tr><th id="L1263"><a href="#L1263">1263</a></th><td>    </td></tr><tr><th id="L1264"><a href="#L1264">1264</a></th><td>    private void on_uname_gallery_url_changed() {</td></tr><tr><th id="L1265"><a href="#L1265">1265</a></th><td>        login_button.set_sensitive((uname_entry.get_text() != "") </td></tr><tr><th id="L1266"><a href="#L1266">1266</a></th><td>                                 &amp;&amp;(gallery_url_entry.get_text() != ""));</td></tr><tr><th id="L1267"><a href="#L1267">1267</a></th><td>    }</td></tr><tr><th id="L1268"><a href="#L1268">1268</a></th><td></td></tr><tr><th id="L1269"><a href="#L1269">1269</a></th><td>    public override void installed() {</td></tr><tr><th id="L1270"><a href="#L1270">1270</a></th><td>        uname_entry.grab_focus();</td></tr><tr><th id="L1271"><a href="#L1271">1271</a></th><td>        password_entry.set_activates_default(true);</td></tr><tr><th id="L1272"><a href="#L1272">1272</a></th><td>        login_button.can_default = true;</td></tr><tr><th id="L1273"><a href="#L1273">1273</a></th><td>        interactor.get_host().set_default(login_button);</td></tr><tr><th id="L1274"><a href="#L1274">1274</a></th><td>    }</td></tr><tr><th id="L1275"><a href="#L1275">1275</a></th><td>}</td></tr><tr><th id="L1276"><a href="#L1276">1276</a></th><td></td></tr><tr><th id="L1277"><a href="#L1277">1277</a></th><td>}</td></tr><tr><th id="L1278"><a href="#L1278">1278</a></th><td></td></tr><tr><th id="L1279"><a href="#L1279">1279</a></th><td>#endif</td></tr><tr><th id="L1280"><a href="#L1280">1280</a></th><td></td></tr></tbody></table>

        </div>
    </div>
    <div id="altlinks">
      <h3>Download in other formats:</h3>
      <ul>
        <li class="last first">
          <a rel="nofollow" href="/raw-attachment/ticket/1585/GalleryConnector.vala">Original Format</a>
        </li>
      </ul>
    </div>
    </div>
    <div id="footer" lang="en" xml:lang="en"><hr />
    </div>
  </body>
</html>